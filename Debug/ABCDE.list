
ABCDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006098  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006228  08006228  00007228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062ac  080062ac  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080062ac  080062ac  000072ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062b4  080062b4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062b4  080062b4  000072b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062b8  080062b8  000072b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080062bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          000002e8  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010856  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022b7  00000000  00000000  000188ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  0001aba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be1  00000000  00000000  0001bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cbaa  00000000  00000000  0001c6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d96  00000000  00000000  00039263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a90d5  00000000  00000000  0004aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f40ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004924  00000000  00000000  000f4114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000f8a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006210 	.word	0x08006210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006210 	.word	0x08006210

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 8000278:	1d39      	adds	r1, r7, #4
 800027a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800027e:	2201      	movs	r2, #1
 8000280:	4808      	ldr	r0, [pc, #32]	@ (80002a4 <__io_putchar+0x34>)
 8000282:	f004 f811 	bl	80042a8 <HAL_UART_Transmit>
   if (ch == '\n') {
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b0a      	cmp	r3, #10
 800028a:	d106      	bne.n	800029a <__io_putchar+0x2a>
      HAL_UART_Transmit(&huart1, (uint8_t *)"\r", 1, 1000);
 800028c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000290:	2201      	movs	r2, #1
 8000292:	4905      	ldr	r1, [pc, #20]	@ (80002a8 <__io_putchar+0x38>)
 8000294:	4803      	ldr	r0, [pc, #12]	@ (80002a4 <__io_putchar+0x34>)
 8000296:	f004 f807 	bl	80042a8 <HAL_UART_Transmit>
   }
   return ch;
 800029a:	687b      	ldr	r3, [r7, #4]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000134 	.word	0x20000134
 80002a8:	08006228 	.word	0x08006228

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fe5f 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f89b 	bl	80003f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f9b5 	bl	8000628 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002be:	f000 f8eb 	bl	8000498 <MX_SPI1_Init>
  MX_TIM2_Init();
 80002c2:	f000 f927 	bl	8000514 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80002c6:	f000 f97f 	bl	80005c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	493d      	ldr	r1, [pc, #244]	@ (80003c4 <main+0x118>)
 80002ce:	483e      	ldr	r0, [pc, #248]	@ (80003c8 <main+0x11c>)
 80002d0:	f004 f873 	bl	80043ba <HAL_UART_Receive_IT>
MFRC522_Init();
 80002d4:	f000 faea 	bl	80008ac <MFRC522_Init>
__HAL_TIM_SET_AUTORELOAD(&htim2, 999);
 80002d8:	4b3c      	ldr	r3, [pc, #240]	@ (80003cc <main+0x120>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80002e2:	4b3a      	ldr	r3, [pc, #232]	@ (80003cc <main+0x120>)
 80002e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002e8:	60da      	str	r2, [r3, #12]
__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80002ea:	4b38      	ldr	r3, [pc, #224]	@ (80003cc <main+0x120>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2200      	movs	r2, #0
 80002f0:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		status = MFRC522_Request(PICC_REQIDL, str);
 80002f2:	4937      	ldr	r1, [pc, #220]	@ (80003d0 <main+0x124>)
 80002f4:	2026      	movs	r0, #38	@ 0x26
 80002f6:	f000 fbd0 	bl	8000a9a <MFRC522_Request>
 80002fa:	4603      	mov	r3, r0
 80002fc:	461a      	mov	r2, r3
 80002fe:	4b35      	ldr	r3, [pc, #212]	@ (80003d4 <main+0x128>)
 8000300:	701a      	strb	r2, [r3, #0]
		status = MFRC522_Anticoll(str);
 8000302:	4833      	ldr	r0, [pc, #204]	@ (80003d0 <main+0x124>)
 8000304:	f000 fbee 	bl	8000ae4 <MFRC522_Anticoll>
 8000308:	4603      	mov	r3, r0
 800030a:	461a      	mov	r2, r3
 800030c:	4b31      	ldr	r3, [pc, #196]	@ (80003d4 <main+0x128>)
 800030e:	701a      	strb	r2, [r3, #0]
		memcpy(sNum, str, 5);
 8000310:	4b31      	ldr	r3, [pc, #196]	@ (80003d8 <main+0x12c>)
 8000312:	4a2f      	ldr	r2, [pc, #188]	@ (80003d0 <main+0x124>)
 8000314:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000318:	6018      	str	r0, [r3, #0]
 800031a:	3304      	adds	r3, #4
 800031c:	7019      	strb	r1, [r3, #0]
		HAL_Delay(100);
 800031e:	2064      	movs	r0, #100	@ 0x64
 8000320:	f000 fe8e 	bl	8001040 <HAL_Delay>
		sprintf(rfidString, "%x %x %x %x\n", str[0], str[1], str[2], str[3]);
 8000324:	4b2a      	ldr	r3, [pc, #168]	@ (80003d0 <main+0x124>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4619      	mov	r1, r3
 800032a:	4b29      	ldr	r3, [pc, #164]	@ (80003d0 <main+0x124>)
 800032c:	785b      	ldrb	r3, [r3, #1]
 800032e:	4618      	mov	r0, r3
 8000330:	4b27      	ldr	r3, [pc, #156]	@ (80003d0 <main+0x124>)
 8000332:	789b      	ldrb	r3, [r3, #2]
 8000334:	461a      	mov	r2, r3
 8000336:	4b26      	ldr	r3, [pc, #152]	@ (80003d0 <main+0x124>)
 8000338:	78db      	ldrb	r3, [r3, #3]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	4603      	mov	r3, r0
 8000340:	460a      	mov	r2, r1
 8000342:	4926      	ldr	r1, [pc, #152]	@ (80003dc <main+0x130>)
 8000344:	4826      	ldr	r0, [pc, #152]	@ (80003e0 <main+0x134>)
 8000346:	f004 ffdd 	bl	8005304 <siprintf>
		printf("%s", rfidString);
 800034a:	4925      	ldr	r1, [pc, #148]	@ (80003e0 <main+0x134>)
 800034c:	4825      	ldr	r0, [pc, #148]	@ (80003e4 <main+0x138>)
 800034e:	f004 ffc7 	bl	80052e0 <iprintf>
		fflush(stdout);
 8000352:	4b25      	ldr	r3, [pc, #148]	@ (80003e8 <main+0x13c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4618      	mov	r0, r3
 800035a:	f004 feeb 	bl	8005134 <fflush>

	  switch(flag) {
 800035e:	4b23      	ldr	r3, [pc, #140]	@ (80003ec <main+0x140>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d002      	beq.n	800036c <main+0xc0>
 8000366:	2b02      	cmp	r3, #2
 8000368:	d011      	beq.n	800038e <main+0xe2>
 800036a:	e022      	b.n	80003b2 <main+0x106>
	  	  	  case 1:
	  	  		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10);
 800036c:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <main+0x120>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	220a      	movs	r2, #10
 8000372:	635a      	str	r2, [r3, #52]	@ 0x34
	  	  		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000374:	2100      	movs	r1, #0
 8000376:	4815      	ldr	r0, [pc, #84]	@ (80003cc <main+0x120>)
 8000378:	f003 f8fc 	bl	8003574 <HAL_TIM_PWM_Start>
	              HAL_Delay(1000);
 800037c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000380:	f000 fe5e 	bl	8001040 <HAL_Delay>
	              HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000384:	2100      	movs	r1, #0
 8000386:	4811      	ldr	r0, [pc, #68]	@ (80003cc <main+0x120>)
 8000388:	f003 f9e0 	bl	800374c <HAL_TIM_PWM_Stop>
	              break;
 800038c:	e011      	b.n	80003b2 <main+0x106>
	          case 2:
	        	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 700);
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <main+0x120>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000396:	635a      	str	r2, [r3, #52]	@ 0x34
	        	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000398:	2100      	movs	r1, #0
 800039a:	480c      	ldr	r0, [pc, #48]	@ (80003cc <main+0x120>)
 800039c:	f003 f8ea 	bl	8003574 <HAL_TIM_PWM_Start>
	              HAL_Delay(1000);
 80003a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003a4:	f000 fe4c 	bl	8001040 <HAL_Delay>
	              HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80003a8:	2100      	movs	r1, #0
 80003aa:	4808      	ldr	r0, [pc, #32]	@ (80003cc <main+0x120>)
 80003ac:	f003 f9ce 	bl	800374c <HAL_TIM_PWM_Stop>
	              break;
 80003b0:	bf00      	nop
	  	  }
	  	  flag=0;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <main+0x140>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
	  	  HAL_Delay(1000);
 80003b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003bc:	f000 fe40 	bl	8001040 <HAL_Delay>
  {
 80003c0:	e797      	b.n	80002f2 <main+0x46>
 80003c2:	bf00      	nop
 80003c4:	200001f8 	.word	0x200001f8
 80003c8:	20000134 	.word	0x20000134
 80003cc:	200000e8 	.word	0x200000e8
 80003d0:	200001c0 	.word	0x200001c0
 80003d4:	200001bc 	.word	0x200001bc
 80003d8:	200001d0 	.word	0x200001d0
 80003dc:	0800622c 	.word	0x0800622c
 80003e0:	200001d8 	.word	0x200001d8
 80003e4:	0800623c 	.word	0x0800623c
 80003e8:	20000018 	.word	0x20000018
 80003ec:	200001f9 	.word	0x200001f9

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b096      	sub	sp, #88	@ 0x58
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003fa:	2228      	movs	r2, #40	@ 0x28
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f004 ffe3 	bl	80053ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000404:	f107 031c 	add.w	r3, r7, #28
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]
 8000422:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000424:	2302      	movs	r3, #2
 8000426:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	2301      	movs	r3, #1
 800042a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042c:	2310      	movs	r3, #16
 800042e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000430:	2300      	movs	r3, #0
 8000432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000438:	4618      	mov	r0, r3
 800043a:	f001 f895 	bl	8001568 <HAL_RCC_OscConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000444:	f000 f97a 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	230f      	movs	r3, #15
 800044a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000454:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000458:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800045e:	f107 031c 	add.w	r3, r7, #28
 8000462:	2100      	movs	r1, #0
 8000464:	4618      	mov	r0, r3
 8000466:	f002 f8bd 	bl	80025e4 <HAL_RCC_ClockConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000470:	f000 f964 	bl	800073c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000474:	2301      	movs	r3, #1
 8000476:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4618      	mov	r0, r3
 8000480:	f002 fad0 	bl	8002a24 <HAL_RCCEx_PeriphCLKConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800048a:	f000 f957 	bl	800073c <Error_Handler>
  }
}
 800048e:	bf00      	nop
 8000490:	3758      	adds	r7, #88	@ 0x58
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800049c:	4b1b      	ldr	r3, [pc, #108]	@ (800050c <MX_SPI1_Init+0x74>)
 800049e:	4a1c      	ldr	r2, [pc, #112]	@ (8000510 <MX_SPI1_Init+0x78>)
 80004a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <MX_SPI1_Init+0x74>)
 80004a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004aa:	4b18      	ldr	r3, [pc, #96]	@ (800050c <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004b0:	4b16      	ldr	r3, [pc, #88]	@ (800050c <MX_SPI1_Init+0x74>)
 80004b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80004b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b8:	4b14      	ldr	r3, [pc, #80]	@ (800050c <MX_SPI1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004be:	4b13      	ldr	r3, [pc, #76]	@ (800050c <MX_SPI1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004c4:	4b11      	ldr	r3, [pc, #68]	@ (800050c <MX_SPI1_Init+0x74>)
 80004c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_SPI1_Init+0x74>)
 80004ce:	2210      	movs	r2, #16
 80004d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <MX_SPI1_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <MX_SPI1_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	@ (800050c <MX_SPI1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004e4:	4b09      	ldr	r3, [pc, #36]	@ (800050c <MX_SPI1_Init+0x74>)
 80004e6:	2207      	movs	r2, #7
 80004e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	@ (800050c <MX_SPI1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004f0:	4b06      	ldr	r3, [pc, #24]	@ (800050c <MX_SPI1_Init+0x74>)
 80004f2:	2208      	movs	r2, #8
 80004f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004f6:	4805      	ldr	r0, [pc, #20]	@ (800050c <MX_SPI1_Init+0x74>)
 80004f8:	f002 fbba 	bl	8002c70 <HAL_SPI_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000502:	f000 f91b 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000084 	.word	0x20000084
 8000510:	40013000 	.word	0x40013000

08000514 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000526:	463b      	mov	r3, r7
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
 8000534:	615a      	str	r2, [r3, #20]
 8000536:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000538:	4b22      	ldr	r3, [pc, #136]	@ (80005c4 <MX_TIM2_Init+0xb0>)
 800053a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800053e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000540:	4b20      	ldr	r3, [pc, #128]	@ (80005c4 <MX_TIM2_Init+0xb0>)
 8000542:	2207      	movs	r2, #7
 8000544:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000546:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <MX_TIM2_Init+0xb0>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800054c:	4b1d      	ldr	r3, [pc, #116]	@ (80005c4 <MX_TIM2_Init+0xb0>)
 800054e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000554:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <MX_TIM2_Init+0xb0>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055a:	4b1a      	ldr	r3, [pc, #104]	@ (80005c4 <MX_TIM2_Init+0xb0>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000560:	4818      	ldr	r0, [pc, #96]	@ (80005c4 <MX_TIM2_Init+0xb0>)
 8000562:	f002 ffaf 	bl	80034c4 <HAL_TIM_PWM_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800056c:	f000 f8e6 	bl	800073c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000578:	f107 031c 	add.w	r3, r7, #28
 800057c:	4619      	mov	r1, r3
 800057e:	4811      	ldr	r0, [pc, #68]	@ (80005c4 <MX_TIM2_Init+0xb0>)
 8000580:	f003 fdd6 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800058a:	f000 f8d7 	bl	800073c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800058e:	2360      	movs	r3, #96	@ 0x60
 8000590:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	4807      	ldr	r0, [pc, #28]	@ (80005c4 <MX_TIM2_Init+0xb0>)
 80005a6:	f003 f95f 	bl	8003868 <HAL_TIM_PWM_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80005b0:	f000 f8c4 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005b4:	4803      	ldr	r0, [pc, #12]	@ (80005c4 <MX_TIM2_Init+0xb0>)
 80005b6:	f000 fb57 	bl	8000c68 <HAL_TIM_MspPostInit>

}
 80005ba:	bf00      	nop
 80005bc:	3728      	adds	r7, #40	@ 0x28
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000e8 	.word	0x200000e8

080005c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005cc:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 80005ce:	4a15      	ldr	r2, [pc, #84]	@ (8000624 <MX_USART1_UART_Init+0x5c>)
 80005d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005d2:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 80005d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 80005ee:	220c      	movs	r2, #12
 80005f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	@ (8000620 <MX_USART1_UART_Init+0x58>)
 800060c:	f003 fdfe 	bl	800420c <HAL_UART_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000616:	f000 f891 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000134 	.word	0x20000134
 8000624:	40013800 	.word	0x40013800

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a27      	ldr	r2, [pc, #156]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 800065c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 8000674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_GPIO_Init+0xb8>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2110      	movs	r1, #16
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f000 ff53 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2109      	movs	r1, #9
 8000696:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 8000698:	f000 ff4e 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800069c:	2310      	movs	r3, #16
 800069e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b6:	f000 fdcd 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80006ba:	2309      	movs	r3, #9
 80006bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4619      	mov	r1, r3
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 80006d2:	f000 fdbf 	bl	8001254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d6:	bf00      	nop
 80006d8:	3720      	adds	r7, #32
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400

080006e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a0d      	ldr	r2, [pc, #52]	@ (800072c <HAL_UART_RxCpltCallback+0x44>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d10e      	bne.n	8000718 <HAL_UART_RxCpltCallback+0x30>
	  if (RxBuffer[0] == '0'){
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <HAL_UART_RxCpltCallback+0x48>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b30      	cmp	r3, #48	@ 0x30
 8000700:	d103      	bne.n	800070a <HAL_UART_RxCpltCallback+0x22>
	  			flag=1;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <HAL_UART_RxCpltCallback+0x4c>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	e006      	b.n	8000718 <HAL_UART_RxCpltCallback+0x30>
	  		}
	  		else if (RxBuffer[0] == '1'){
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <HAL_UART_RxCpltCallback+0x48>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b31      	cmp	r3, #49	@ 0x31
 8000710:	d102      	bne.n	8000718 <HAL_UART_RxCpltCallback+0x30>
	  			flag=2;
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <HAL_UART_RxCpltCallback+0x4c>)
 8000714:	2202      	movs	r2, #2
 8000716:	701a      	strb	r2, [r3, #0]
	  		}

  }
  HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	4905      	ldr	r1, [pc, #20]	@ (8000730 <HAL_UART_RxCpltCallback+0x48>)
 800071c:	4806      	ldr	r0, [pc, #24]	@ (8000738 <HAL_UART_RxCpltCallback+0x50>)
 800071e:	f003 fe4c 	bl	80043ba <HAL_UART_Receive_IT>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40013800 	.word	0x40013800
 8000730:	200001f8 	.word	0x200001f8
 8000734:	200001f9 	.word	0x200001f9
 8000738:	20000134 	.word	0x20000134

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <Error_Handler+0x8>

08000748 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000752:	f107 020f 	add.w	r2, r7, #15
 8000756:	1df9      	adds	r1, r7, #7
 8000758:	2364      	movs	r3, #100	@ 0x64
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	4804      	ldr	r0, [pc, #16]	@ (8000770 <RC522_SPI_Transfer+0x28>)
 8000760:	f002 fb29 	bl	8002db6 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000084 	.word	0x20000084

08000774 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2110      	movs	r1, #16
 8000788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078c:	f000 fed4 	bl	8001538 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffd3 	bl	8000748 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffcf 	bl	8000748 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2110      	movs	r1, #16
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b2:	f000 fec1 	bl	8001538 <HAL_GPIO_WritePin>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b084      	sub	sp, #16
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2110      	movs	r1, #16
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d0:	f000 feb2 	bl	8001538 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ffad 	bl	8000748 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff ffaa 	bl	8000748 <RC522_SPI_Transfer>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2110      	movs	r1, #16
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000800:	f000 fe9a 	bl	8001538 <HAL_GPIO_WritePin>

	return val;
 8000804:	7bfb      	ldrb	r3, [r7, #15]

}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	460a      	mov	r2, r1
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ffcc 	bl	80007be <Read_MFRC522>
 8000826:	4603      	mov	r3, r0
 8000828:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	79bb      	ldrb	r3, [r7, #6]
 800082e:	4313      	orrs	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff9c 	bl	8000774 <Write_MFRC522>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	460a      	mov	r2, r1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffb1 	bl	80007be <Read_MFRC522>
 800085c:	4603      	mov	r3, r0
 800085e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000860:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000864:	43db      	mvns	r3, r3
 8000866:	b25a      	sxtb	r2, r3
 8000868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086c:	4013      	ands	r3, r2
 800086e:	b25b      	sxtb	r3, r3
 8000870:	b2da      	uxtb	r2, r3
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff7c 	bl	8000774 <Write_MFRC522>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000888:	2014      	movs	r0, #20
 800088a:	f7ff ff98 	bl	80007be <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 800088e:	2103      	movs	r1, #3
 8000890:	2014      	movs	r0, #20
 8000892:	f7ff ffbc 	bl	800080e <SetBitMask>
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}

0800089a <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800089e:	210f      	movs	r1, #15
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff ff67 	bl	8000774 <Write_MFRC522>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2110      	movs	r1, #16
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b8:	f000 fe3e 	bl	8001538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2101      	movs	r1, #1
 80008c0:	4810      	ldr	r0, [pc, #64]	@ (8000904 <MFRC522_Init+0x58>)
 80008c2:	f000 fe39 	bl	8001538 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80008c6:	f7ff ffe8 	bl	800089a <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80008ca:	218d      	movs	r1, #141	@ 0x8d
 80008cc:	202a      	movs	r0, #42	@ 0x2a
 80008ce:	f7ff ff51 	bl	8000774 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80008d2:	213e      	movs	r1, #62	@ 0x3e
 80008d4:	202b      	movs	r0, #43	@ 0x2b
 80008d6:	f7ff ff4d 	bl	8000774 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80008da:	211e      	movs	r1, #30
 80008dc:	202d      	movs	r0, #45	@ 0x2d
 80008de:	f7ff ff49 	bl	8000774 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	202c      	movs	r0, #44	@ 0x2c
 80008e6:	f7ff ff45 	bl	8000774 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80008ea:	2140      	movs	r1, #64	@ 0x40
 80008ec:	2015      	movs	r0, #21
 80008ee:	f7ff ff41 	bl	8000774 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80008f2:	213d      	movs	r1, #61	@ 0x3d
 80008f4:	2011      	movs	r0, #17
 80008f6:	f7ff ff3d 	bl	8000774 <Write_MFRC522>

	AntennaOn();
 80008fa:	f7ff ffc3 	bl	8000884 <AntennaOn>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	48000400 	.word	0x48000400

08000908 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b089      	sub	sp, #36	@ 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4603      	mov	r3, r0
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	4613      	mov	r3, r2
 8000918:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800091a:	2302      	movs	r3, #2
 800091c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000922:	2300      	movs	r3, #0
 8000924:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	d006      	beq.n	800093a <MFRC522_ToCard+0x32>
 800092c:	2b0e      	cmp	r3, #14
 800092e:	d109      	bne.n	8000944 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000930:	2312      	movs	r3, #18
 8000932:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000934:	2310      	movs	r3, #16
 8000936:	777b      	strb	r3, [r7, #29]
			break;
 8000938:	e005      	b.n	8000946 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800093a:	2377      	movs	r3, #119	@ 0x77
 800093c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800093e:	2330      	movs	r3, #48	@ 0x30
 8000940:	777b      	strb	r3, [r7, #29]
			break;
 8000942:	e000      	b.n	8000946 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000944:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000946:	7fbb      	ldrb	r3, [r7, #30]
 8000948:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4619      	mov	r1, r3
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff ff0f 	bl	8000774 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	2004      	movs	r0, #4
 800095a:	f7ff ff73 	bl	8000844 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	200a      	movs	r0, #10
 8000962:	f7ff ff54 	bl	800080e <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000966:	2100      	movs	r1, #0
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff ff03 	bl	8000774 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	e00a      	b.n	800098a <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	2009      	movs	r0, #9
 8000980:	f7ff fef8 	bl	8000774 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	3301      	adds	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	429a      	cmp	r2, r3
 8000990:	d3f0      	bcc.n	8000974 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	4619      	mov	r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	f7ff feec 	bl	8000774 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	2b0c      	cmp	r3, #12
 80009a0:	d103      	bne.n	80009aa <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80009a2:	2180      	movs	r1, #128	@ 0x80
 80009a4:	200d      	movs	r0, #13
 80009a6:	f7ff ff32 	bl	800080e <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80009aa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009ae:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80009b0:	2004      	movs	r0, #4
 80009b2:	f7ff ff04 	bl	80007be <Read_MFRC522>
 80009b6:	4603      	mov	r3, r0
 80009b8:	773b      	strb	r3, [r7, #28]
        i--;
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	3b01      	subs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00a      	beq.n	80009dc <MFRC522_ToCard+0xd4>
 80009c6:	7f3b      	ldrb	r3, [r7, #28]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d105      	bne.n	80009dc <MFRC522_ToCard+0xd4>
 80009d0:	7f3a      	ldrb	r2, [r7, #28]
 80009d2:	7f7b      	ldrb	r3, [r7, #29]
 80009d4:	4013      	ands	r3, r2
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0e9      	beq.n	80009b0 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80009dc:	2180      	movs	r1, #128	@ 0x80
 80009de:	200d      	movs	r0, #13
 80009e0:	f7ff ff30 	bl	8000844 <ClearBitMask>

    if (i != 0)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d052      	beq.n	8000a90 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80009ea:	2006      	movs	r0, #6
 80009ec:	f7ff fee7 	bl	80007be <Read_MFRC522>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f003 031b 	and.w	r3, r3, #27
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d148      	bne.n	8000a8c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80009fe:	7f3a      	ldrb	r2, [r7, #28]
 8000a00:	7fbb      	ldrb	r3, [r7, #30]
 8000a02:	4013      	ands	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	2b0c      	cmp	r3, #12
 8000a16:	d13b      	bne.n	8000a90 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f7ff fed0 	bl	80007be <Read_MFRC522>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000a22:	200c      	movs	r0, #12
 8000a24:	f7ff fecb 	bl	80007be <Read_MFRC522>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d008      	beq.n	8000a48 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8000a36:	7f3b      	ldrb	r3, [r7, #28]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	00da      	lsls	r2, r3, #3
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	4413      	add	r3, r2
 8000a40:	461a      	mov	r2, r3
 8000a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e004      	b.n	8000a52 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8000a48:	7f3b      	ldrb	r3, [r7, #28]
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a50:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000a52:	7f3b      	ldrb	r3, [r7, #28]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000a5c:	7f3b      	ldrb	r3, [r7, #28]
 8000a5e:	2b10      	cmp	r3, #16
 8000a60:	d901      	bls.n	8000a66 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000a62:	2310      	movs	r3, #16
 8000a64:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	e00a      	b.n	8000a82 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	18d4      	adds	r4, r2, r3
 8000a72:	2009      	movs	r0, #9
 8000a74:	f7ff fea3 	bl	80007be <Read_MFRC522>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	7f3b      	ldrb	r3, [r7, #28]
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d3f0      	bcc.n	8000a6c <MFRC522_ToCard+0x164>
 8000a8a:	e001      	b.n	8000a90 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	@ 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}

08000a9a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af02      	add	r7, sp, #8
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	6039      	str	r1, [r7, #0]
 8000aa4:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	200d      	movs	r0, #13
 8000aaa:	f7ff fe63 	bl	8000774 <Write_MFRC522>

	TagType[0] = reqMode;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	79fa      	ldrb	r2, [r7, #7]
 8000ab2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2201      	movs	r2, #1
 8000abe:	6839      	ldr	r1, [r7, #0]
 8000ac0:	200c      	movs	r0, #12
 8000ac2:	f7ff ff21 	bl	8000908 <MFRC522_ToCard>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <MFRC522_Request+0x3c>
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	2b10      	cmp	r3, #16
 8000ad4:	d001      	beq.n	8000ada <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000af0:	2100      	movs	r1, #0
 8000af2:	200d      	movs	r0, #13
 8000af4:	f7ff fe3e 	bl	8000774 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2293      	movs	r2, #147	@ 0x93
 8000afc:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3301      	adds	r3, #1
 8000b02:	2220      	movs	r2, #32
 8000b04:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2202      	movs	r2, #2
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	200c      	movs	r0, #12
 8000b14:	f7ff fef8 	bl	8000908 <MFRC522_ToCard>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d118      	bne.n	8000b54 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	73bb      	strb	r3, [r7, #14]
 8000b26:	e009      	b.n	8000b3c <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	7b7b      	ldrb	r3, [r7, #13]
 8000b32:	4053      	eors	r3, r2
 8000b34:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	73bb      	strb	r3, [r7, #14]
 8000b3c:	7bbb      	ldrb	r3, [r7, #14]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d9f2      	bls.n	8000b28 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000b42:	7bbb      	ldrb	r3, [r7, #14]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	4413      	add	r3, r2
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	7b7a      	ldrb	r2, [r7, #13]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d001      	beq.n	8000b54 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000b50:	2302      	movs	r3, #2
 8000b52:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <HAL_SPI_MspInit+0x7c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d128      	bne.n	8000c1c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <HAL_SPI_MspInit+0x80>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	4a16      	ldr	r2, [pc, #88]	@ (8000c28 <HAL_SPI_MspInit+0x80>)
 8000bd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bd4:	6193      	str	r3, [r2, #24]
 8000bd6:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <HAL_SPI_MspInit+0x80>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_SPI_MspInit+0x80>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <HAL_SPI_MspInit+0x80>)
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bec:	6153      	str	r3, [r2, #20]
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_SPI_MspInit+0x80>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bfa:	23e0      	movs	r3, #224	@ 0xe0
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c18:	f000 fb1c 	bl	8001254 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	@ 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40013000 	.word	0x40013000
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c3c:	d10b      	bne.n	8000c56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_TIM_PWM_MspInit+0x38>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_TIM_PWM_MspInit+0x38>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_TIM_PWM_MspInit+0x38>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c88:	d11c      	bne.n	8000cc4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <HAL_TIM_MspPostInit+0x64>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ccc <HAL_TIM_MspPostInit+0x64>)
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <HAL_TIM_MspPostInit+0x64>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc0:	f000 fac8 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a18      	ldr	r2, [pc, #96]	@ (8000d50 <HAL_UART_MspInit+0x80>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d129      	bne.n	8000d46 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	4a11      	ldr	r2, [pc, #68]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d14:	6153      	str	r3, [r2, #20]
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d22:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d34:	2307      	movs	r3, #7
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d42:	f000 fa87 	bl	8001254 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	@ 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40013800 	.word	0x40013800
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f927 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	e00a      	b.n	8000dde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc8:	f3af 8000 	nop.w
 8000dcc:	4601      	mov	r1, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	60ba      	str	r2, [r7, #8]
 8000dd4:	b2ca      	uxtb	r2, r1
 8000dd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dbf0      	blt.n	8000dc8 <_read+0x12>
  }

  return len;
 8000de6:	687b      	ldr	r3, [r7, #4]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e009      	b.n	8000e16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	60ba      	str	r2, [r7, #8]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa30 	bl	8000270 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	dbf1      	blt.n	8000e02 <_write+0x12>
  }
  return len;
 8000e1e:	687b      	ldr	r3, [r7, #4]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_close>:

int _close(int file)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e50:	605a      	str	r2, [r3, #4]
  return 0;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_isatty>:

int _isatty(int file)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b085      	sub	sp, #20
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f004 fad2 	bl	8005468 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20003000 	.word	0x20003000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	200001fc 	.word	0x200001fc
 8000ef8:	20000350 	.word	0x20000350

08000efc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff ffea 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	@ (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f004 fa91 	bl	8005474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff f9ab 	bl	80002ac <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f58:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f64:	080062bc 	.word	0x080062bc
  ldr r2, =_sbss
 8000f68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f6c:	20000350 	.word	0x20000350

08000f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_2_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <HAL_Init+0x28>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	@ (8000f9c <HAL_Init+0x28>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f931 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff fde6 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f93b 	bl	800123a <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fdc:	f000 f911 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	@ (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008
 8001024:	20000200 	.word	0x20000200

08001028 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;  
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000200 	.word	0x20000200

08001040 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff47 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff5c 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff8e 	bl	8001140 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffb0 	bl	80011a8 <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e14e      	b.n	8001502 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8140 	beq.w	80014fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b01      	cmp	r3, #1
 8001286:	d005      	beq.n	8001294 <HAL_GPIO_Init+0x40>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d130      	bne.n	80012f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ca:	2201      	movs	r2, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f003 0201 	and.w	r2, r3, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d017      	beq.n	8001332 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d123      	bne.n	8001386 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	6939      	ldr	r1, [r7, #16]
 8001382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0203 	and.w	r2, r3, #3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 809a 	beq.w	80014fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c8:	4b55      	ldr	r3, [pc, #340]	@ (8001520 <HAL_GPIO_Init+0x2cc>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a54      	ldr	r2, [pc, #336]	@ (8001520 <HAL_GPIO_Init+0x2cc>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b52      	ldr	r3, [pc, #328]	@ (8001520 <HAL_GPIO_Init+0x2cc>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e0:	4a50      	ldr	r2, [pc, #320]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800140a:	d013      	beq.n	8001434 <HAL_GPIO_Init+0x1e0>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a46      	ldr	r2, [pc, #280]	@ (8001528 <HAL_GPIO_Init+0x2d4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d00d      	beq.n	8001430 <HAL_GPIO_Init+0x1dc>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a45      	ldr	r2, [pc, #276]	@ (800152c <HAL_GPIO_Init+0x2d8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d007      	beq.n	800142c <HAL_GPIO_Init+0x1d8>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a44      	ldr	r2, [pc, #272]	@ (8001530 <HAL_GPIO_Init+0x2dc>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d101      	bne.n	8001428 <HAL_GPIO_Init+0x1d4>
 8001424:	2303      	movs	r3, #3
 8001426:	e006      	b.n	8001436 <HAL_GPIO_Init+0x1e2>
 8001428:	2305      	movs	r3, #5
 800142a:	e004      	b.n	8001436 <HAL_GPIO_Init+0x1e2>
 800142c:	2302      	movs	r3, #2
 800142e:	e002      	b.n	8001436 <HAL_GPIO_Init+0x1e2>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <HAL_GPIO_Init+0x1e2>
 8001434:	2300      	movs	r3, #0
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	f002 0203 	and.w	r2, r2, #3
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	4093      	lsls	r3, r2
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001446:	4937      	ldr	r1, [pc, #220]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3302      	adds	r3, #2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001454:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <HAL_GPIO_Init+0x2e0>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001478:	4a2e      	ldr	r2, [pc, #184]	@ (8001534 <HAL_GPIO_Init+0x2e0>)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800147e:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <HAL_GPIO_Init+0x2e0>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014a2:	4a24      	ldr	r2, [pc, #144]	@ (8001534 <HAL_GPIO_Init+0x2e0>)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014a8:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <HAL_GPIO_Init+0x2e0>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014cc:	4a19      	ldr	r2, [pc, #100]	@ (8001534 <HAL_GPIO_Init+0x2e0>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <HAL_GPIO_Init+0x2e0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001534 <HAL_GPIO_Init+0x2e0>)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	f47f aea9 	bne.w	8001264 <HAL_GPIO_Init+0x10>
  }
}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000
 8001528:	48000400 	.word	0x48000400
 800152c:	48000800 	.word	0x48000800
 8001530:	48000c00 	.word	0x48000c00
 8001534:	40010400 	.word	0x40010400

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001548:	787b      	ldrb	r3, [r7, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001554:	e002      	b.n	800155c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800156e:	af00      	add	r7, sp, #0
 8001570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001574:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001578:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800157a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800157e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	f001 b823 	b.w	80025d4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001592:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 817d 	beq.w	800189e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015a4:	4bbc      	ldr	r3, [pc, #752]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d00c      	beq.n	80015ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b0:	4bb9      	ldr	r3, [pc, #740]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d15c      	bne.n	8001676 <HAL_RCC_OscConfig+0x10e>
 80015bc:	4bb6      	ldr	r3, [pc, #728]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c8:	d155      	bne.n	8001676 <HAL_RCC_OscConfig+0x10e>
 80015ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015ce:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	095b      	lsrs	r3, r3, #5
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d102      	bne.n	80015fc <HAL_RCC_OscConfig+0x94>
 80015f6:	4ba8      	ldr	r3, [pc, #672]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	e015      	b.n	8001628 <HAL_RCC_OscConfig+0xc0>
 80015fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001600:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001610:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001614:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001618:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800161c:	fa93 f3a3 	rbit	r3, r3
 8001620:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001624:	4b9c      	ldr	r3, [pc, #624]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800162c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001630:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001634:	fa92 f2a2 	rbit	r2, r2
 8001638:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800163c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001640:	fab2 f282 	clz	r2, r2
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	f042 0220 	orr.w	r2, r2, #32
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	f002 021f 	and.w	r2, r2, #31
 8001650:	2101      	movs	r1, #1
 8001652:	fa01 f202 	lsl.w	r2, r1, r2
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 811f 	beq.w	800189c <HAL_RCC_OscConfig+0x334>
 800165e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 8116 	bne.w	800189c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	f000 bfaf 	b.w	80025d4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x12e>
 8001688:	4b83      	ldr	r3, [pc, #524]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a82      	ldr	r2, [pc, #520]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 800168e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e036      	b.n	8001704 <HAL_RCC_OscConfig+0x19c>
 8001696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x158>
 80016a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a7b      	ldr	r2, [pc, #492]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b79      	ldr	r3, [pc, #484]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a78      	ldr	r2, [pc, #480]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e021      	b.n	8001704 <HAL_RCC_OscConfig+0x19c>
 80016c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x184>
 80016d2:	4b71      	ldr	r3, [pc, #452]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a70      	ldr	r2, [pc, #448]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b6e      	ldr	r3, [pc, #440]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6d      	ldr	r2, [pc, #436]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0x19c>
 80016ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a69      	ldr	r2, [pc, #420]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b67      	ldr	r3, [pc, #412]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a66      	ldr	r2, [pc, #408]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001702:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001704:	4b64      	ldr	r3, [pc, #400]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 8001706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001708:	f023 020f 	bic.w	r2, r3, #15
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	495f      	ldr	r1, [pc, #380]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 800171a:	4313      	orrs	r3, r2
 800171c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800171e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001722:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d059      	beq.n	80017e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff fc7b 	bl	8001028 <HAL_GetTick>
 8001732:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fc76 	bl	8001028 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b64      	cmp	r3, #100	@ 0x64
 8001746:	d902      	bls.n	800174e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	f000 bf43 	b.w	80025d4 <HAL_RCC_OscConfig+0x106c>
 800174e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001752:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001762:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	095b      	lsrs	r3, r3, #5
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <HAL_RCC_OscConfig+0x218>
 800177a:	4b47      	ldr	r3, [pc, #284]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	e015      	b.n	80017ac <HAL_RCC_OscConfig+0x244>
 8001780:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001784:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001794:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001798:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800179c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80017a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017b0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80017b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80017b8:	fa92 f2a2 	rbit	r2, r2
 80017bc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80017c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80017c4:	fab2 f282 	clz	r2, r2
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	f042 0220 	orr.w	r2, r2, #32
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	f002 021f 	and.w	r2, r2, #31
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ab      	beq.n	8001738 <HAL_RCC_OscConfig+0x1d0>
 80017e0:	e05d      	b.n	800189e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fc21 	bl	8001028 <HAL_GetTick>
 80017e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fc1c 	bl	8001028 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b64      	cmp	r3, #100	@ 0x64
 80017fa:	d902      	bls.n	8001802 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	f000 bee9 	b.w	80025d4 <HAL_RCC_OscConfig+0x106c>
 8001802:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001806:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001816:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d102      	bne.n	8001834 <HAL_RCC_OscConfig+0x2cc>
 800182e:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	e015      	b.n	8001860 <HAL_RCC_OscConfig+0x2f8>
 8001834:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001838:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001848:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800184c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001850:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001864:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001868:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800186c:	fa92 f2a2 	rbit	r2, r2
 8001870:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001874:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001878:	fab2 f282 	clz	r2, r2
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	f042 0220 	orr.w	r2, r2, #32
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f002 021f 	and.w	r2, r2, #31
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ab      	bne.n	80017ec <HAL_RCC_OscConfig+0x284>
 8001894:	e003      	b.n	800189e <HAL_RCC_OscConfig+0x336>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 817d 	beq.w	8001bae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018b4:	4ba6      	ldr	r3, [pc, #664]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00b      	beq.n	80018d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018c0:	4ba3      	ldr	r3, [pc, #652]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d172      	bne.n	80019b2 <HAL_RCC_OscConfig+0x44a>
 80018cc:	4ba0      	ldr	r3, [pc, #640]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d16c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x44a>
 80018d8:	2302      	movs	r3, #2
 80018da:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80018ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	095b      	lsrs	r3, r3, #5
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <HAL_RCC_OscConfig+0x3a0>
 8001902:	4b93      	ldr	r3, [pc, #588]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	e013      	b.n	8001930 <HAL_RCC_OscConfig+0x3c8>
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800191a:	2302      	movs	r3, #2
 800191c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001920:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800192c:	4b88      	ldr	r3, [pc, #544]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	2202      	movs	r2, #2
 8001932:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001936:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800193a:	fa92 f2a2 	rbit	r2, r2
 800193e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001942:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001946:	fab2 f282 	clz	r2, r2
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	f042 0220 	orr.w	r2, r2, #32
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	f002 021f 	and.w	r2, r2, #31
 8001956:	2101      	movs	r1, #1
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00a      	beq.n	8001978 <HAL_RCC_OscConfig+0x410>
 8001962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d002      	beq.n	8001978 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	f000 be2e 	b.w	80025d4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b75      	ldr	r3, [pc, #468]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001984:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	21f8      	movs	r1, #248	@ 0xf8
 800198e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001996:	fa91 f1a1 	rbit	r1, r1
 800199a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800199e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80019a2:	fab1 f181 	clz	r1, r1
 80019a6:	b2c9      	uxtb	r1, r1
 80019a8:	408b      	lsls	r3, r1
 80019aa:	4969      	ldr	r1, [pc, #420]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b0:	e0fd      	b.n	8001bae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8088 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x56c>
 80019c4:	2301      	movs	r3, #1
 80019c6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80019d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	461a      	mov	r2, r3
 80019ec:	2301      	movs	r3, #1
 80019ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fb1a 	bl	8001028 <HAL_GetTick>
 80019f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fb15 	bl	8001028 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d902      	bls.n	8001a10 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	f000 bde2 	b.w	80025d4 <HAL_RCC_OscConfig+0x106c>
 8001a10:	2302      	movs	r3, #2
 8001a12:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001a22:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	095b      	lsrs	r3, r3, #5
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d102      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4d8>
 8001a3a:	4b45      	ldr	r3, [pc, #276]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	e013      	b.n	8001a68 <HAL_RCC_OscConfig+0x500>
 8001a40:	2302      	movs	r3, #2
 8001a42:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001a52:	2302      	movs	r3, #2
 8001a54:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001a58:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001a64:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	2202      	movs	r2, #2
 8001a6a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001a6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001a72:	fa92 f2a2 	rbit	r2, r2
 8001a76:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001a7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001a7e:	fab2 f282 	clz	r2, r2
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f042 0220 	orr.w	r2, r2, #32
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	f002 021f 	and.w	r2, r2, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0af      	beq.n	80019fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	21f8      	movs	r1, #248	@ 0xf8
 8001ab0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ab8:	fa91 f1a1 	rbit	r1, r1
 8001abc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001ac0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001ac4:	fab1 f181 	clz	r1, r1
 8001ac8:	b2c9      	uxtb	r1, r1
 8001aca:	408b      	lsls	r3, r1
 8001acc:	4920      	ldr	r1, [pc, #128]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
 8001ad2:	e06c      	b.n	8001bae <HAL_RCC_OscConfig+0x646>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001ae6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001af4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	461a      	mov	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fa92 	bl	8001028 <HAL_GetTick>
 8001b04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fa8d 	bl	8001028 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d902      	bls.n	8001b20 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f000 bd5a 	b.w	80025d4 <HAL_RCC_OscConfig+0x106c>
 8001b20:	2302      	movs	r3, #2
 8001b22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	095b      	lsrs	r3, r3, #5
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d104      	bne.n	8001b54 <HAL_RCC_OscConfig+0x5ec>
 8001b4a:	4b01      	ldr	r3, [pc, #4]	@ (8001b50 <HAL_RCC_OscConfig+0x5e8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	e015      	b.n	8001b7c <HAL_RCC_OscConfig+0x614>
 8001b50:	40021000 	.word	0x40021000
 8001b54:	2302      	movs	r3, #2
 8001b56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001b6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001b78:	4bc8      	ldr	r3, [pc, #800]	@ (8001e9c <HAL_RCC_OscConfig+0x934>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001b82:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b86:	fa92 f2a2 	rbit	r2, r2
 8001b8a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001b8e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001b92:	fab2 f282 	clz	r2, r2
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	f042 0220 	orr.w	r2, r2, #32
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	f002 021f 	and.w	r2, r2, #31
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ad      	bne.n	8001b0a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8110 	beq.w	8001de4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d079      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x760>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4bab      	ldr	r3, [pc, #684]	@ (8001ea0 <HAL_RCC_OscConfig+0x938>)
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fa13 	bl	8001028 <HAL_GetTick>
 8001c02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff fa0e 	bl	8001028 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d902      	bls.n	8001c1e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	f000 bcdb 	b.w	80025d4 <HAL_RCC_OscConfig+0x106c>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c34:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c38:	2202      	movs	r2, #2
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c40:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c76:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c78:	4b88      	ldr	r3, [pc, #544]	@ (8001e9c <HAL_RCC_OscConfig+0x934>)
 8001c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c84:	2102      	movs	r1, #2
 8001c86:	6019      	str	r1, [r3, #0]
 8001c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f1a3 	rbit	r1, r3
 8001c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c9e:	6019      	str	r1, [r3, #0]
  return result;
 8001ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0a0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x6a0>
 8001cc6:	e08d      	b.n	8001de4 <HAL_RCC_OscConfig+0x87c>
 8001cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ccc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	fa93 f2a3 	rbit	r2, r3
 8001ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cea:	601a      	str	r2, [r3, #0]
  return result;
 8001cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cf4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b68      	ldr	r3, [pc, #416]	@ (8001ea0 <HAL_RCC_OscConfig+0x938>)
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	461a      	mov	r2, r3
 8001d06:	2300      	movs	r3, #0
 8001d08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f98d 	bl	8001028 <HAL_GetTick>
 8001d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff f988 	bl	8001028 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d902      	bls.n	8001d2a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	f000 bc55 	b.w	80025d4 <HAL_RCC_OscConfig+0x106c>
 8001d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d48:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001d56:	2202      	movs	r2, #2
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d76:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d90:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d96:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <HAL_RCC_OscConfig+0x934>)
 8001d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001da2:	2102      	movs	r1, #2
 8001da4:	6019      	str	r1, [r3, #0]
 8001da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001daa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f1a3 	rbit	r1, r3
 8001db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001dbc:	6019      	str	r1, [r3, #0]
  return result;
 8001dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d197      	bne.n	8001d14 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 81a1 	beq.w	800213c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e00:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <HAL_RCC_OscConfig+0x934>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d116      	bne.n	8001e3a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <HAL_RCC_OscConfig+0x934>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	4a22      	ldr	r2, [pc, #136]	@ (8001e9c <HAL_RCC_OscConfig+0x934>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	61d3      	str	r3, [r2, #28]
 8001e18:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <HAL_RCC_OscConfig+0x934>)
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e24:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001e32:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <HAL_RCC_OscConfig+0x93c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11a      	bne.n	8001e7c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e46:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <HAL_RCC_OscConfig+0x93c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a16      	ldr	r2, [pc, #88]	@ (8001ea4 <HAL_RCC_OscConfig+0x93c>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e52:	f7ff f8e9 	bl	8001028 <HAL_GetTick>
 8001e56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	e009      	b.n	8001e70 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5c:	f7ff f8e4 	bl	8001028 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b64      	cmp	r3, #100	@ 0x64
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e3b1      	b.n	80025d4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <HAL_RCC_OscConfig+0x93c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ef      	beq.n	8001e5c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x940>
 8001e8c:	4b03      	ldr	r3, [pc, #12]	@ (8001e9c <HAL_RCC_OscConfig+0x934>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4a02      	ldr	r2, [pc, #8]	@ (8001e9c <HAL_RCC_OscConfig+0x934>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6213      	str	r3, [r2, #32]
 8001e98:	e03c      	b.n	8001f14 <HAL_RCC_OscConfig+0x9ac>
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	10908120 	.word	0x10908120
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10c      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x96a>
 8001eb8:	4bc1      	ldr	r3, [pc, #772]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4ac0      	ldr	r2, [pc, #768]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	4bbe      	ldr	r3, [pc, #760]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4abd      	ldr	r2, [pc, #756]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001eca:	f023 0304 	bic.w	r3, r3, #4
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	e020      	b.n	8001f14 <HAL_RCC_OscConfig+0x9ac>
 8001ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x994>
 8001ee2:	4bb7      	ldr	r3, [pc, #732]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4ab6      	ldr	r2, [pc, #728]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	4bb4      	ldr	r3, [pc, #720]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4ab3      	ldr	r2, [pc, #716]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0x9ac>
 8001efc:	4bb0      	ldr	r3, [pc, #704]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4aaf      	ldr	r2, [pc, #700]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	4bad      	ldr	r3, [pc, #692]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4aac      	ldr	r2, [pc, #688]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 8081 	beq.w	8002028 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff f87f 	bl	8001028 <HAL_GetTick>
 8001f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7ff f87a 	bl	8001028 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e345      	b.n	80025d4 <HAL_RCC_OscConfig+0x106c>
 8001f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f50:	2202      	movs	r2, #2
 8001f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f2a3 	rbit	r2, r3
 8001f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f66:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f70:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f74:	2202      	movs	r2, #2
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	fa93 f2a3 	rbit	r2, r3
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f8e:	601a      	str	r2, [r3, #0]
  return result;
 8001f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f94:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_OscConfig+0xa4c>
 8001fae:	4b84      	ldr	r3, [pc, #528]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	e013      	b.n	8001fdc <HAL_RCC_OscConfig+0xa74>
 8001fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	4b79      	ldr	r3, [pc, #484]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fe0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	6011      	str	r1, [r2, #0]
 8001fe8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	fa92 f1a2 	rbit	r1, r2
 8001ff6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ffa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ffe:	6011      	str	r1, [r2, #0]
  return result;
 8002000:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002004:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f002 021f 	and.w	r2, r2, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d084      	beq.n	8001f30 <HAL_RCC_OscConfig+0x9c8>
 8002026:	e07f      	b.n	8002128 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002028:	f7fe fffe 	bl	8001028 <HAL_GetTick>
 800202c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002030:	e00b      	b.n	800204a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7fe fff9 	bl	8001028 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e2c4      	b.n	80025d4 <HAL_RCC_OscConfig+0x106c>
 800204a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002052:	2202      	movs	r2, #2
 8002054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	fa93 f2a3 	rbit	r2, r3
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002072:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002076:	2202      	movs	r2, #2
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	fa93 f2a3 	rbit	r2, r3
 8002088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002090:	601a      	str	r2, [r3, #0]
  return result;
 8002092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002096:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800209a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d102      	bne.n	80020b6 <HAL_RCC_OscConfig+0xb4e>
 80020b0:	4b43      	ldr	r3, [pc, #268]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	e013      	b.n	80020de <HAL_RCC_OscConfig+0xb76>
 80020b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ba:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80020be:	2202      	movs	r2, #2
 80020c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	fa93 f2a3 	rbit	r2, r3
 80020d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	4b39      	ldr	r3, [pc, #228]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020e2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80020e6:	2102      	movs	r1, #2
 80020e8:	6011      	str	r1, [r2, #0]
 80020ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020ee:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	fa92 f1a2 	rbit	r1, r2
 80020f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020fc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002100:	6011      	str	r1, [r2, #0]
  return result;
 8002102:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002106:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	fab2 f282 	clz	r2, r2
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f002 021f 	and.w	r2, r2, #31
 800211c:	2101      	movs	r1, #1
 800211e:	fa01 f202 	lsl.w	r2, r1, r2
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d184      	bne.n	8002032 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002128:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	4a22      	ldr	r2, [pc, #136]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8002136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800213a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800213c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002140:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8242 	beq.w	80025d2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214e:	4b1c      	ldr	r3, [pc, #112]	@ (80021c0 <HAL_RCC_OscConfig+0xc58>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	f000 8213 	beq.w	8002582 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800215c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002160:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	2b02      	cmp	r3, #2
 800216a:	f040 8162 	bne.w	8002432 <HAL_RCC_OscConfig+0xeca>
 800216e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002172:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002176:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800217a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002180:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	fa93 f2a3 	rbit	r2, r3
 800218a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002192:	601a      	str	r2, [r3, #0]
  return result;
 8002194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002198:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800219c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	461a      	mov	r2, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe ff38 	bl	8001028 <HAL_GetTick>
 80021b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021bc:	e00c      	b.n	80021d8 <HAL_RCC_OscConfig+0xc70>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7fe ff30 	bl	8001028 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e1fd      	b.n	80025d4 <HAL_RCC_OscConfig+0x106c>
 80021d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021dc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80021e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80021fc:	601a      	str	r2, [r3, #0]
  return result;
 80021fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002202:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002206:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d102      	bne.n	8002222 <HAL_RCC_OscConfig+0xcba>
 800221c:	4bb0      	ldr	r3, [pc, #704]	@ (80024e0 <HAL_RCC_OscConfig+0xf78>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	e027      	b.n	8002272 <HAL_RCC_OscConfig+0xd0a>
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800222a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800222e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002242:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002250:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	fa93 f2a3 	rbit	r2, r3
 8002264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002268:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	4b9c      	ldr	r3, [pc, #624]	@ (80024e0 <HAL_RCC_OscConfig+0xf78>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002276:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800227a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800227e:	6011      	str	r1, [r2, #0]
 8002280:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002284:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	fa92 f1a2 	rbit	r1, r2
 800228e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002292:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002296:	6011      	str	r1, [r2, #0]
  return result;
 8002298:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800229c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	fab2 f282 	clz	r2, r2
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f042 0220 	orr.w	r2, r2, #32
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f002 021f 	and.w	r2, r2, #31
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d182      	bne.n	80021c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022be:	4b88      	ldr	r3, [pc, #544]	@ (80024e0 <HAL_RCC_OscConfig+0xf78>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80022d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	430b      	orrs	r3, r1
 80022e0:	497f      	ldr	r1, [pc, #508]	@ (80024e0 <HAL_RCC_OscConfig+0xf78>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
 80022e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ea:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80022ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002306:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800230a:	601a      	str	r2, [r3, #0]
  return result;
 800230c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002310:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002314:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002320:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	461a      	mov	r2, r3
 8002328:	2301      	movs	r3, #1
 800232a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fe7c 	bl	8001028 <HAL_GetTick>
 8002330:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002334:	e009      	b.n	800234a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe fe77 	bl	8001028 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e144      	b.n	80025d4 <HAL_RCC_OscConfig+0x106c>
 800234a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002352:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	fa93 f2a3 	rbit	r2, r3
 8002366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800236e:	601a      	str	r2, [r3, #0]
  return result;
 8002370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002374:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002378:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d102      	bne.n	8002394 <HAL_RCC_OscConfig+0xe2c>
 800238e:	4b54      	ldr	r3, [pc, #336]	@ (80024e0 <HAL_RCC_OscConfig+0xf78>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	e027      	b.n	80023e4 <HAL_RCC_OscConfig+0xe7c>
 8002394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002398:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800239c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	fa93 f2a3 	rbit	r2, r3
 80023b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80023c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	fa93 f2a3 	rbit	r2, r3
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	4b3f      	ldr	r3, [pc, #252]	@ (80024e0 <HAL_RCC_OscConfig+0xf78>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023e8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80023ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023f0:	6011      	str	r1, [r2, #0]
 80023f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023f6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	fa92 f1a2 	rbit	r1, r2
 8002400:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002404:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002408:	6011      	str	r1, [r2, #0]
  return result;
 800240a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800240e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	fab2 f282 	clz	r2, r2
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f042 0220 	orr.w	r2, r2, #32
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	f002 021f 	and.w	r2, r2, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f202 	lsl.w	r2, r1, r2
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d082      	beq.n	8002336 <HAL_RCC_OscConfig+0xdce>
 8002430:	e0cf      	b.n	80025d2 <HAL_RCC_OscConfig+0x106a>
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800243a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800243e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f2a3 	rbit	r2, r3
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002456:	601a      	str	r2, [r3, #0]
  return result;
 8002458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002460:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800246c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	461a      	mov	r2, r3
 8002474:	2300      	movs	r3, #0
 8002476:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe fdd6 	bl	8001028 <HAL_GetTick>
 800247c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002480:	e009      	b.n	8002496 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002482:	f7fe fdd1 	bl	8001028 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e09e      	b.n	80025d4 <HAL_RCC_OscConfig+0x106c>
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800249e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80024ba:	601a      	str	r2, [r3, #0]
  return result;
 80024bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80024c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d104      	bne.n	80024e4 <HAL_RCC_OscConfig+0xf7c>
 80024da:	4b01      	ldr	r3, [pc, #4]	@ (80024e0 <HAL_RCC_OscConfig+0xf78>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	e029      	b.n	8002534 <HAL_RCC_OscConfig+0xfcc>
 80024e0:	40021000 	.word	0x40021000
 80024e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80024ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	fa93 f2a3 	rbit	r2, r3
 8002500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002504:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002512:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	4b2b      	ldr	r3, [pc, #172]	@ (80025e0 <HAL_RCC_OscConfig+0x1078>)
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002538:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800253c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002540:	6011      	str	r1, [r2, #0]
 8002542:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002546:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	fa92 f1a2 	rbit	r1, r2
 8002550:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002554:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002558:	6011      	str	r1, [r2, #0]
  return result;
 800255a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800255e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	fab2 f282 	clz	r2, r2
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	f042 0220 	orr.w	r2, r2, #32
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f002 021f 	and.w	r2, r2, #31
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f202 	lsl.w	r2, r1, r2
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d180      	bne.n	8002482 <HAL_RCC_OscConfig+0xf1a>
 8002580:	e027      	b.n	80025d2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002586:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e01e      	b.n	80025d4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <HAL_RCC_OscConfig+0x1078>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800259e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80025a2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d10b      	bne.n	80025ce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80025ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b09e      	sub	sp, #120	@ 0x78
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e162      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b90      	ldr	r3, [pc, #576]	@ (8002840 <HAL_RCC_ClockConfig+0x25c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d910      	bls.n	800262c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b8d      	ldr	r3, [pc, #564]	@ (8002840 <HAL_RCC_ClockConfig+0x25c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0207 	bic.w	r2, r3, #7
 8002612:	498b      	ldr	r1, [pc, #556]	@ (8002840 <HAL_RCC_ClockConfig+0x25c>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b89      	ldr	r3, [pc, #548]	@ (8002840 <HAL_RCC_ClockConfig+0x25c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e14a      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b82      	ldr	r3, [pc, #520]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	497f      	ldr	r1, [pc, #508]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80dc 	beq.w	8002810 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d13c      	bne.n	80026da <HAL_RCC_ClockConfig+0xf6>
 8002660:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002664:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800266e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <HAL_RCC_ClockConfig+0xa6>
 8002684:	4b6f      	ldr	r3, [pc, #444]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	e00f      	b.n	80026aa <HAL_RCC_ClockConfig+0xc6>
 800268a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800268e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	667b      	str	r3, [r7, #100]	@ 0x64
 8002698:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800269c:	663b      	str	r3, [r7, #96]	@ 0x60
 800269e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026a6:	4b67      	ldr	r3, [pc, #412]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 80026b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026b2:	fa92 f2a2 	rbit	r2, r2
 80026b6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80026b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80026ba:	fab2 f282 	clz	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f042 0220 	orr.w	r2, r2, #32
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f002 021f 	and.w	r2, r2, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d17b      	bne.n	80027ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0f3      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d13c      	bne.n	800275c <HAL_RCC_ClockConfig+0x178>
 80026e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026e6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80026f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <HAL_RCC_ClockConfig+0x128>
 8002706:	4b4f      	ldr	r3, [pc, #316]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	e00f      	b.n	800272c <HAL_RCC_ClockConfig+0x148>
 800270c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002710:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	647b      	str	r3, [r7, #68]	@ 0x44
 800271a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800271e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002728:	4b46      	ldr	r3, [pc, #280]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002730:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002732:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002734:	fa92 f2a2 	rbit	r2, r2
 8002738:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800273a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800273c:	fab2 f282 	clz	r2, r2
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f042 0220 	orr.w	r2, r2, #32
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f002 021f 	and.w	r2, r2, #31
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f202 	lsl.w	r2, r1, r2
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d13a      	bne.n	80027ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b2      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
 800275c:	2302      	movs	r3, #2
 800275e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d102      	bne.n	8002784 <HAL_RCC_ClockConfig+0x1a0>
 800277e:	4b31      	ldr	r3, [pc, #196]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	e00d      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1bc>
 8002784:	2302      	movs	r3, #2
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002790:	2302      	movs	r3, #2
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	2202      	movs	r2, #2
 80027a2:	61ba      	str	r2, [r7, #24]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	fa92 f2a2 	rbit	r2, r2
 80027aa:	617a      	str	r2, [r7, #20]
  return result;
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	fab2 f282 	clz	r2, r2
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f002 021f 	and.w	r2, r2, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e079      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	491a      	ldr	r1, [pc, #104]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fc22 	bl	8001028 <HAL_GetTick>
 80027e4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fc1e 	bl	8001028 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e061      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <HAL_RCC_ClockConfig+0x260>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCC_ClockConfig+0x25c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d214      	bcs.n	8002848 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <HAL_RCC_ClockConfig+0x25c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0207 	bic.w	r2, r3, #7
 8002826:	4906      	ldr	r1, [pc, #24]	@ (8002840 <HAL_RCC_ClockConfig+0x25c>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b04      	ldr	r3, [pc, #16]	@ (8002840 <HAL_RCC_ClockConfig+0x25c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e040      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
 8002840:	40022000 	.word	0x40022000
 8002844:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002854:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <HAL_RCC_ClockConfig+0x2e8>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	491a      	ldr	r1, [pc, #104]	@ (80028cc <HAL_RCC_ClockConfig+0x2e8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002872:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <HAL_RCC_ClockConfig+0x2e8>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4912      	ldr	r1, [pc, #72]	@ (80028cc <HAL_RCC_ClockConfig+0x2e8>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002886:	f000 f829 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800288a:	4601      	mov	r1, r0
 800288c:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <HAL_RCC_ClockConfig+0x2e8>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002894:	22f0      	movs	r2, #240	@ 0xf0
 8002896:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	fa92 f2a2 	rbit	r2, r2
 800289e:	60fa      	str	r2, [r7, #12]
  return result;
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	40d3      	lsrs	r3, r2
 80028aa:	4a09      	ldr	r2, [pc, #36]	@ (80028d0 <HAL_RCC_ClockConfig+0x2ec>)
 80028ac:	5cd3      	ldrb	r3, [r2, r3]
 80028ae:	fa21 f303 	lsr.w	r3, r1, r3
 80028b2:	4a08      	ldr	r2, [pc, #32]	@ (80028d4 <HAL_RCC_ClockConfig+0x2f0>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028b6:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_RCC_ClockConfig+0x2f4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fb70 	bl	8000fa0 <HAL_InitTick>
  
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3778      	adds	r7, #120	@ 0x78
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08006240 	.word	0x08006240
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x94>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x30>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x36>
 800290a:	e026      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800290e:	613b      	str	r3, [r7, #16]
      break;
 8002910:	e026      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	4a17      	ldr	r2, [pc, #92]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x9c>)
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x94>)
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	4a14      	ldr	r2, [pc, #80]	@ (800297c <HAL_RCC_GetSysClockFreq+0xa0>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002938:	4a0e      	ldr	r2, [pc, #56]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	e004      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a0c      	ldr	r2, [pc, #48]	@ (8002980 <HAL_RCC_GetSysClockFreq+0xa4>)
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	613b      	str	r3, [r7, #16]
      break;
 8002958:	e002      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800295c:	613b      	str	r3, [r7, #16]
      break;
 800295e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002960:	693b      	ldr	r3, [r7, #16]
}
 8002962:	4618      	mov	r0, r3
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	007a1200 	.word	0x007a1200
 8002978:	08006258 	.word	0x08006258
 800297c:	08006268 	.word	0x08006268
 8002980:	003d0900 	.word	0x003d0900

08002984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <HAL_RCC_GetHCLKFreq+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029a2:	f7ff ffef 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a6:	4601      	mov	r1, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029b0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80029b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	fa92 f2a2 	rbit	r2, r2
 80029bc:	603a      	str	r2, [r7, #0]
  return result;
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	fab2 f282 	clz	r2, r2
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	40d3      	lsrs	r3, r2
 80029c8:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	08006250 	.word	0x08006250

080029e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80029e6:	f7ff ffcd 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029ea:	4601      	mov	r1, r0
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80029f4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80029f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	fa92 f2a2 	rbit	r2, r2
 8002a00:	603a      	str	r2, [r7, #0]
  return result;
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	40d3      	lsrs	r3, r2
 8002a0c:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a0e:	5cd3      	ldrb	r3, [r2, r3]
 8002a10:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	08006250 	.word	0x08006250

08002a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b092      	sub	sp, #72	@ 0x48
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80cd 	beq.w	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a48:	4b86      	ldr	r3, [pc, #536]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10e      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	4b83      	ldr	r3, [pc, #524]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4a82      	ldr	r2, [pc, #520]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	61d3      	str	r3, [r2, #28]
 8002a60:	4b80      	ldr	r3, [pc, #512]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b7d      	ldr	r3, [pc, #500]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a79      	ldr	r2, [pc, #484]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7fe facd 	bl	8001028 <HAL_GetTick>
 8002a8e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7fe fac9 	bl	8001028 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	@ 0x64
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0db      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b70      	ldr	r3, [pc, #448]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ab0:	4b6c      	ldr	r3, [pc, #432]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d07d      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d076      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ace:	4b65      	ldr	r3, [pc, #404]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ad8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	461a      	mov	r2, r3
 8002af8:	2301      	movs	r3, #1
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b55      	ldr	r3, [pc, #340]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b20:	4a50      	ldr	r2, [pc, #320]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b24:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d045      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fa7a 	bl	8001028 <HAL_GetTick>
 8002b34:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe fa76 	bl	8001028 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e086      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	61fb      	str	r3, [r7, #28]
  return result;
 8002b66:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d102      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b7c:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	e007      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002b82:	2302      	movs	r3, #2
 8002b84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	4b35      	ldr	r3, [pc, #212]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	2202      	movs	r2, #2
 8002b94:	613a      	str	r2, [r7, #16]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	fa92 f2a2 	rbit	r2, r2
 8002b9c:	60fa      	str	r2, [r7, #12]
  return result;
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	fab2 f282 	clz	r2, r2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f002 021f 	and.w	r2, r2, #31
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0bd      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bbc:	4b29      	ldr	r3, [pc, #164]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4926      	ldr	r1, [pc, #152]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d105      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd6:	4b23      	ldr	r3, [pc, #140]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	4a22      	ldr	r2, [pc, #136]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002be0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bee:	4b1d      	ldr	r3, [pc, #116]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	491a      	ldr	r1, [pc, #104]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c0c:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	f023 0210 	bic.w	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4912      	ldr	r1, [pc, #72]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	490b      	ldr	r1, [pc, #44]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c48:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	4903      	ldr	r1, [pc, #12]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3748      	adds	r7, #72	@ 0x48
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	10908100 	.word	0x10908100

08002c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e095      	b.n	8002dae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c92:	d009      	beq.n	8002ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
 8002c9a:	e005      	b.n	8002ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd ff70 	bl	8000ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ce8:	d902      	bls.n	8002cf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	e002      	b.n	8002cf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002cfe:	d007      	beq.n	8002d10 <HAL_SPI_Init+0xa0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d08:	d002      	beq.n	8002d10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d52:	ea42 0103 	orr.w	r1, r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	f003 0204 	and.w	r2, r3, #4
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d8c:	ea42 0103 	orr.w	r1, r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b08a      	sub	sp, #40	@ 0x28
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x26>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e20a      	b.n	80031f2 <HAL_SPI_TransmitReceive+0x43c>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de4:	f7fe f920 	bl	8001028 <HAL_GetTick>
 8002de8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002df0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e00:	7efb      	ldrb	r3, [r7, #27]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d00e      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x6e>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e0c:	d106      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x66>
 8002e16:	7efb      	ldrb	r3, [r7, #27]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d003      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002e22:	e1e0      	b.n	80031e6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_SPI_TransmitReceive+0x80>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_SPI_TransmitReceive+0x80>
 8002e30:	887b      	ldrh	r3, [r7, #2]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002e3c:	e1d3      	b.n	80031e6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d003      	beq.n	8002e52 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2205      	movs	r2, #5
 8002e4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	887a      	ldrh	r2, [r7, #2]
 8002e62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	887a      	ldrh	r2, [r7, #2]
 8002e7e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e94:	d802      	bhi.n	8002e9c <HAL_SPI_TransmitReceive+0xe6>
 8002e96:	8a3b      	ldrh	r3, [r7, #16]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d908      	bls.n	8002eae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	e007      	b.n	8002ebe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ebc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec8:	2b40      	cmp	r3, #64	@ 0x40
 8002eca:	d007      	beq.n	8002edc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ee4:	f240 8081 	bls.w	8002fea <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_SPI_TransmitReceive+0x140>
 8002ef0:	8a7b      	ldrh	r3, [r7, #18]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d16d      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efa:	881a      	ldrh	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f06:	1c9a      	adds	r2, r3, #2
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f1a:	e05a      	b.n	8002fd2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d11b      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x1ac>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d016      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x1ac>
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d113      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3e:	881a      	ldrh	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4a:	1c9a      	adds	r2, r3, #2
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d11c      	bne.n	8002faa <HAL_SPI_TransmitReceive+0x1f4>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d016      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	b292      	uxth	r2, r2
 8002f88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	1c9a      	adds	r2, r3, #2
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002faa:	f7fe f83d 	bl	8001028 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d80b      	bhi.n	8002fd2 <HAL_SPI_TransmitReceive+0x21c>
 8002fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fc0:	d007      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002fd0:	e109      	b.n	80031e6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d19f      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x166>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d199      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x166>
 8002fe8:	e0e3      	b.n	80031b2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_SPI_TransmitReceive+0x244>
 8002ff2:	8a7b      	ldrh	r3, [r7, #18]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	f040 80cf 	bne.w	8003198 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d912      	bls.n	800302a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b02      	subs	r3, #2
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003028:	e0b6      	b.n	8003198 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	330c      	adds	r3, #12
 8003034:	7812      	ldrb	r2, [r2, #0]
 8003036:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003050:	e0a2      	b.n	8003198 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	d134      	bne.n	80030ca <HAL_SPI_TransmitReceive+0x314>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d02f      	beq.n	80030ca <HAL_SPI_TransmitReceive+0x314>
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	2b01      	cmp	r3, #1
 800306e:	d12c      	bne.n	80030ca <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d912      	bls.n	80030a0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	1c9a      	adds	r2, r3, #2
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b02      	subs	r3, #2
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800309e:	e012      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d148      	bne.n	800316a <HAL_SPI_TransmitReceive+0x3b4>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d042      	beq.n	800316a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d923      	bls.n	8003138 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	b292      	uxth	r2, r2
 80030fc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	1c9a      	adds	r2, r3, #2
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b02      	subs	r3, #2
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d81f      	bhi.n	8003166 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	e016      	b.n	8003166 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f103 020c 	add.w	r2, r3, #12
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003166:	2301      	movs	r3, #1
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800316a:	f7fd ff5d 	bl	8001028 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003176:	429a      	cmp	r2, r3
 8003178:	d803      	bhi.n	8003182 <HAL_SPI_TransmitReceive+0x3cc>
 800317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003180:	d102      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x3d2>
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	2b00      	cmp	r3, #0
 8003186:	d107      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003196:	e026      	b.n	80031e6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f47f af57 	bne.w	8003052 <HAL_SPI_TransmitReceive+0x29c>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f47f af50 	bne.w	8003052 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f93e 	bl	8003438 <SPI_EndRxTxTransaction>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031dc:	e003      	b.n	80031e6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3728      	adds	r7, #40	@ 0x28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800320c:	f7fd ff0c 	bl	8001028 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	4413      	add	r3, r2
 800321a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800321c:	f7fd ff04 	bl	8001028 <HAL_GetTick>
 8003220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003222:	4b39      	ldr	r3, [pc, #228]	@ (8003308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	015b      	lsls	r3, r3, #5
 8003228:	0d1b      	lsrs	r3, r3, #20
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003232:	e054      	b.n	80032de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800323a:	d050      	beq.n	80032de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800323c:	f7fd fef4 	bl	8001028 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	429a      	cmp	r2, r3
 800324a:	d902      	bls.n	8003252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d13d      	bne.n	80032ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800326a:	d111      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003274:	d004      	beq.n	8003280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327e:	d107      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800328e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003298:	d10f      	bne.n	80032ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e017      	b.n	80032fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3b01      	subs	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4013      	ands	r3, r2
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	bf0c      	ite	eq
 80032ee:	2301      	moveq	r3, #1
 80032f0:	2300      	movne	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d19b      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000000 	.word	0x20000000

0800330c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	@ 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800331e:	f7fd fe83 	bl	8001028 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	4413      	add	r3, r2
 800332c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800332e:	f7fd fe7b 	bl	8001028 <HAL_GetTick>
 8003332:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800333c:	4b3d      	ldr	r3, [pc, #244]	@ (8003434 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00da      	lsls	r2, r3, #3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	0d1b      	lsrs	r3, r3, #20
 800334c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003354:	e060      	b.n	8003418 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800335c:	d107      	bne.n	800336e <SPI_WaitFifoStateUntilTimeout+0x62>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800336c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003374:	d050      	beq.n	8003418 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003376:	f7fd fe57 	bl	8001028 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003382:	429a      	cmp	r2, r3
 8003384:	d902      	bls.n	800338c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	2b00      	cmp	r3, #0
 800338a:	d13d      	bne.n	8003408 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800339a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033a4:	d111      	bne.n	80033ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ae:	d004      	beq.n	80033ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b8:	d107      	bne.n	80033ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033d2:	d10f      	bne.n	80033f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e010      	b.n	800342a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	3b01      	subs	r3, #1
 8003416:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d196      	bne.n	8003356 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3728      	adds	r7, #40	@ 0x28
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2200      	movs	r2, #0
 800344c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff ff5b 	bl	800330c <SPI_WaitFifoStateUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e027      	b.n	80034bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2200      	movs	r2, #0
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7ff fec0 	bl	80031fc <SPI_WaitFlagStateUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003486:	f043 0220 	orr.w	r2, r3, #32
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e014      	b.n	80034bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7ff ff34 	bl	800330c <SPI_WaitFifoStateUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e000      	b.n	80034bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e049      	b.n	800356a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd fb9e 	bl	8000c2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3304      	adds	r3, #4
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f000 fac4 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_TIM_PWM_Start+0x24>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e03c      	b.n	8003612 <HAL_TIM_PWM_Start+0x9e>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b04      	cmp	r3, #4
 800359c:	d109      	bne.n	80035b2 <HAL_TIM_PWM_Start+0x3e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	bf14      	ite	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	2300      	moveq	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	e02f      	b.n	8003612 <HAL_TIM_PWM_Start+0x9e>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d109      	bne.n	80035cc <HAL_TIM_PWM_Start+0x58>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e022      	b.n	8003612 <HAL_TIM_PWM_Start+0x9e>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d109      	bne.n	80035e6 <HAL_TIM_PWM_Start+0x72>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	e015      	b.n	8003612 <HAL_TIM_PWM_Start+0x9e>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d109      	bne.n	8003600 <HAL_TIM_PWM_Start+0x8c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e008      	b.n	8003612 <HAL_TIM_PWM_Start+0x9e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e088      	b.n	800372c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <HAL_TIM_PWM_Start+0xb6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003628:	e023      	b.n	8003672 <HAL_TIM_PWM_Start+0xfe>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b04      	cmp	r3, #4
 800362e:	d104      	bne.n	800363a <HAL_TIM_PWM_Start+0xc6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003638:	e01b      	b.n	8003672 <HAL_TIM_PWM_Start+0xfe>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d104      	bne.n	800364a <HAL_TIM_PWM_Start+0xd6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003648:	e013      	b.n	8003672 <HAL_TIM_PWM_Start+0xfe>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d104      	bne.n	800365a <HAL_TIM_PWM_Start+0xe6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003658:	e00b      	b.n	8003672 <HAL_TIM_PWM_Start+0xfe>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b10      	cmp	r3, #16
 800365e:	d104      	bne.n	800366a <HAL_TIM_PWM_Start+0xf6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003668:	e003      	b.n	8003672 <HAL_TIM_PWM_Start+0xfe>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2201      	movs	r2, #1
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fd32 	bl	80040e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2b      	ldr	r2, [pc, #172]	@ (8003734 <HAL_TIM_PWM_Start+0x1c0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_TIM_PWM_Start+0x134>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2a      	ldr	r2, [pc, #168]	@ (8003738 <HAL_TIM_PWM_Start+0x1c4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_TIM_PWM_Start+0x134>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a28      	ldr	r2, [pc, #160]	@ (800373c <HAL_TIM_PWM_Start+0x1c8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_TIM_PWM_Start+0x134>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a27      	ldr	r2, [pc, #156]	@ (8003740 <HAL_TIM_PWM_Start+0x1cc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <HAL_TIM_PWM_Start+0x138>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_TIM_PWM_Start+0x13a>
 80036ac:	2300      	movs	r3, #0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003734 <HAL_TIM_PWM_Start+0x1c0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_TIM_PWM_Start+0x176>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d4:	d009      	beq.n	80036ea <HAL_TIM_PWM_Start+0x176>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1a      	ldr	r2, [pc, #104]	@ (8003744 <HAL_TIM_PWM_Start+0x1d0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_TIM_PWM_Start+0x176>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <HAL_TIM_PWM_Start+0x1c4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d115      	bne.n	8003716 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	4b15      	ldr	r3, [pc, #84]	@ (8003748 <HAL_TIM_PWM_Start+0x1d4>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d015      	beq.n	8003728 <HAL_TIM_PWM_Start+0x1b4>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003702:	d011      	beq.n	8003728 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003714:	e008      	b.n	8003728 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e000      	b.n	800372a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40014000 	.word	0x40014000
 800373c:	40014400 	.word	0x40014400
 8003740:	40014800 	.word	0x40014800
 8003744:	40000400 	.word	0x40000400
 8003748:	00010007 	.word	0x00010007

0800374c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2200      	movs	r2, #0
 800375c:	6839      	ldr	r1, [r7, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fcc0 	bl	80040e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a3b      	ldr	r2, [pc, #236]	@ (8003858 <HAL_TIM_PWM_Stop+0x10c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00e      	beq.n	800378c <HAL_TIM_PWM_Stop+0x40>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a3a      	ldr	r2, [pc, #232]	@ (800385c <HAL_TIM_PWM_Stop+0x110>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_TIM_PWM_Stop+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a38      	ldr	r2, [pc, #224]	@ (8003860 <HAL_TIM_PWM_Stop+0x114>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_TIM_PWM_Stop+0x40>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a37      	ldr	r2, [pc, #220]	@ (8003864 <HAL_TIM_PWM_Stop+0x118>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_TIM_PWM_Stop+0x44>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_TIM_PWM_Stop+0x46>
 8003790:	2300      	movs	r3, #0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d017      	beq.n	80037c6 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a1a      	ldr	r2, [r3, #32]
 800379c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10f      	bne.n	80037c6 <HAL_TIM_PWM_Stop+0x7a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d107      	bne.n	80037c6 <HAL_TIM_PWM_Stop+0x7a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a1a      	ldr	r2, [r3, #32]
 80037cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10f      	bne.n	80037f6 <HAL_TIM_PWM_Stop+0xaa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6a1a      	ldr	r2, [r3, #32]
 80037dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d107      	bne.n	80037f6 <HAL_TIM_PWM_Stop+0xaa>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Stop+0xba>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003804:	e023      	b.n	800384e <HAL_TIM_PWM_Stop+0x102>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Stop+0xca>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003814:	e01b      	b.n	800384e <HAL_TIM_PWM_Stop+0x102>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d104      	bne.n	8003826 <HAL_TIM_PWM_Stop+0xda>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003824:	e013      	b.n	800384e <HAL_TIM_PWM_Stop+0x102>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d104      	bne.n	8003836 <HAL_TIM_PWM_Stop+0xea>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003834:	e00b      	b.n	800384e <HAL_TIM_PWM_Stop+0x102>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b10      	cmp	r3, #16
 800383a:	d104      	bne.n	8003846 <HAL_TIM_PWM_Stop+0xfa>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003844:	e003      	b.n	800384e <HAL_TIM_PWM_Stop+0x102>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40014000 	.word	0x40014000
 8003860:	40014400 	.word	0x40014400
 8003864:	40014800 	.word	0x40014800

08003868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003882:	2302      	movs	r3, #2
 8003884:	e0ff      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b14      	cmp	r3, #20
 8003892:	f200 80f0 	bhi.w	8003a76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003896:	a201      	add	r2, pc, #4	@ (adr r2, 800389c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038f1 	.word	0x080038f1
 80038a0:	08003a77 	.word	0x08003a77
 80038a4:	08003a77 	.word	0x08003a77
 80038a8:	08003a77 	.word	0x08003a77
 80038ac:	08003931 	.word	0x08003931
 80038b0:	08003a77 	.word	0x08003a77
 80038b4:	08003a77 	.word	0x08003a77
 80038b8:	08003a77 	.word	0x08003a77
 80038bc:	08003973 	.word	0x08003973
 80038c0:	08003a77 	.word	0x08003a77
 80038c4:	08003a77 	.word	0x08003a77
 80038c8:	08003a77 	.word	0x08003a77
 80038cc:	080039b3 	.word	0x080039b3
 80038d0:	08003a77 	.word	0x08003a77
 80038d4:	08003a77 	.word	0x08003a77
 80038d8:	08003a77 	.word	0x08003a77
 80038dc:	080039f5 	.word	0x080039f5
 80038e0:	08003a77 	.word	0x08003a77
 80038e4:	08003a77 	.word	0x08003a77
 80038e8:	08003a77 	.word	0x08003a77
 80038ec:	08003a35 	.word	0x08003a35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f94e 	bl	8003b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0208 	orr.w	r2, r2, #8
 800390a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0204 	bic.w	r2, r2, #4
 800391a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6999      	ldr	r1, [r3, #24]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	619a      	str	r2, [r3, #24]
      break;
 800392e:	e0a5      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f9b4 	bl	8003ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800394a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800395a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6999      	ldr	r1, [r3, #24]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	021a      	lsls	r2, r3, #8
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	619a      	str	r2, [r3, #24]
      break;
 8003970:	e084      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fa13 	bl	8003da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0208 	orr.w	r2, r2, #8
 800398c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0204 	bic.w	r2, r2, #4
 800399c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69d9      	ldr	r1, [r3, #28]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	61da      	str	r2, [r3, #28]
      break;
 80039b0:	e064      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fa71 	bl	8003ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69d9      	ldr	r1, [r3, #28]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	021a      	lsls	r2, r3, #8
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	61da      	str	r2, [r3, #28]
      break;
 80039f2:	e043      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fab4 	bl	8003f68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0208 	orr.w	r2, r2, #8
 8003a0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a32:	e023      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 faf2 	bl	8004024 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a74:	e002      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop

08003a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a38      	ldr	r2, [pc, #224]	@ (8003b84 <TIM_Base_SetConfig+0xf4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d007      	beq.n	8003ab8 <TIM_Base_SetConfig+0x28>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aae:	d003      	beq.n	8003ab8 <TIM_Base_SetConfig+0x28>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a35      	ldr	r2, [pc, #212]	@ (8003b88 <TIM_Base_SetConfig+0xf8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d108      	bne.n	8003aca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <TIM_Base_SetConfig+0xf4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <TIM_Base_SetConfig+0x6a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad8:	d00f      	beq.n	8003afa <TIM_Base_SetConfig+0x6a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2a      	ldr	r2, [pc, #168]	@ (8003b88 <TIM_Base_SetConfig+0xf8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <TIM_Base_SetConfig+0x6a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a29      	ldr	r2, [pc, #164]	@ (8003b8c <TIM_Base_SetConfig+0xfc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <TIM_Base_SetConfig+0x6a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a28      	ldr	r2, [pc, #160]	@ (8003b90 <TIM_Base_SetConfig+0x100>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d003      	beq.n	8003afa <TIM_Base_SetConfig+0x6a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <TIM_Base_SetConfig+0x104>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a14      	ldr	r2, [pc, #80]	@ (8003b84 <TIM_Base_SetConfig+0xf4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <TIM_Base_SetConfig+0xc0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a14      	ldr	r2, [pc, #80]	@ (8003b8c <TIM_Base_SetConfig+0xfc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_Base_SetConfig+0xc0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a13      	ldr	r2, [pc, #76]	@ (8003b90 <TIM_Base_SetConfig+0x100>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_Base_SetConfig+0xc0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <TIM_Base_SetConfig+0x104>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d103      	bne.n	8003b58 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d105      	bne.n	8003b76 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f023 0201 	bic.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	611a      	str	r2, [r3, #16]
  }
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800

08003b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f023 0201 	bic.w	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 0302 	bic.w	r3, r3, #2
 8003be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a28      	ldr	r2, [pc, #160]	@ (8003c94 <TIM_OC1_SetConfig+0xfc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_OC1_SetConfig+0x78>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a27      	ldr	r2, [pc, #156]	@ (8003c98 <TIM_OC1_SetConfig+0x100>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_OC1_SetConfig+0x78>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a26      	ldr	r2, [pc, #152]	@ (8003c9c <TIM_OC1_SetConfig+0x104>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_OC1_SetConfig+0x78>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a25      	ldr	r2, [pc, #148]	@ (8003ca0 <TIM_OC1_SetConfig+0x108>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10c      	bne.n	8003c2a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0308 	bic.w	r3, r3, #8
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	@ (8003c94 <TIM_OC1_SetConfig+0xfc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_OC1_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a18      	ldr	r2, [pc, #96]	@ (8003c98 <TIM_OC1_SetConfig+0x100>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <TIM_OC1_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	@ (8003c9c <TIM_OC1_SetConfig+0x104>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_OC1_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a16      	ldr	r2, [pc, #88]	@ (8003ca0 <TIM_OC1_SetConfig+0x108>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d111      	bne.n	8003c6e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	621a      	str	r2, [r3, #32]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40014400 	.word	0x40014400
 8003ca0:	40014800 	.word	0x40014800

08003ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f023 0210 	bic.w	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0320 	bic.w	r3, r3, #32
 8003cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a24      	ldr	r2, [pc, #144]	@ (8003d94 <TIM_OC2_SetConfig+0xf0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d10d      	bne.n	8003d24 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1b      	ldr	r2, [pc, #108]	@ (8003d94 <TIM_OC2_SetConfig+0xf0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <TIM_OC2_SetConfig+0xa0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d98 <TIM_OC2_SetConfig+0xf4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <TIM_OC2_SetConfig+0xa0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a19      	ldr	r2, [pc, #100]	@ (8003d9c <TIM_OC2_SetConfig+0xf8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_OC2_SetConfig+0xa0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <TIM_OC2_SetConfig+0xfc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d113      	bne.n	8003d6c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d4a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d52:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40012c00 	.word	0x40012c00
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800

08003da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a23      	ldr	r2, [pc, #140]	@ (8003e90 <TIM_OC3_SetConfig+0xec>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10d      	bne.n	8003e22 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e20:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1a      	ldr	r2, [pc, #104]	@ (8003e90 <TIM_OC3_SetConfig+0xec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00b      	beq.n	8003e42 <TIM_OC3_SetConfig+0x9e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	@ (8003e94 <TIM_OC3_SetConfig+0xf0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <TIM_OC3_SetConfig+0x9e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a18      	ldr	r2, [pc, #96]	@ (8003e98 <TIM_OC3_SetConfig+0xf4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC3_SetConfig+0x9e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	@ (8003e9c <TIM_OC3_SetConfig+0xf8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d113      	bne.n	8003e6a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800

08003ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	031b      	lsls	r3, r3, #12
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a16      	ldr	r2, [pc, #88]	@ (8003f58 <TIM_OC4_SetConfig+0xb8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_OC4_SetConfig+0x7c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a15      	ldr	r2, [pc, #84]	@ (8003f5c <TIM_OC4_SetConfig+0xbc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_OC4_SetConfig+0x7c>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a14      	ldr	r2, [pc, #80]	@ (8003f60 <TIM_OC4_SetConfig+0xc0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_OC4_SetConfig+0x7c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a13      	ldr	r2, [pc, #76]	@ (8003f64 <TIM_OC4_SetConfig+0xc4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d109      	bne.n	8003f30 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800

08003f68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003fac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <TIM_OC5_SetConfig+0xac>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <TIM_OC5_SetConfig+0x72>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a14      	ldr	r2, [pc, #80]	@ (8004018 <TIM_OC5_SetConfig+0xb0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <TIM_OC5_SetConfig+0x72>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a13      	ldr	r2, [pc, #76]	@ (800401c <TIM_OC5_SetConfig+0xb4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_OC5_SetConfig+0x72>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a12      	ldr	r2, [pc, #72]	@ (8004020 <TIM_OC5_SetConfig+0xb8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d109      	bne.n	8003fee <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	621a      	str	r2, [r3, #32]
}
 8004008:	bf00      	nop
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800

08004024 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800406a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	051b      	lsls	r3, r3, #20
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <TIM_OC6_SetConfig+0xb0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_OC6_SetConfig+0x74>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <TIM_OC6_SetConfig+0xb4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <TIM_OC6_SetConfig+0x74>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a14      	ldr	r2, [pc, #80]	@ (80040dc <TIM_OC6_SetConfig+0xb8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC6_SetConfig+0x74>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a13      	ldr	r2, [pc, #76]	@ (80040e0 <TIM_OC6_SetConfig+0xbc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d109      	bne.n	80040ac <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800409e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	029b      	lsls	r3, r3, #10
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40014000 	.word	0x40014000
 80040dc:	40014400 	.word	0x40014400
 80040e0:	40014800 	.word	0x40014800

080040e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	2201      	movs	r2, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	43db      	mvns	r3, r3
 8004106:	401a      	ands	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1a      	ldr	r2, [r3, #32]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	431a      	orrs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e054      	b.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a24      	ldr	r2, [pc, #144]	@ (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d108      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004178:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a17      	ldr	r2, [pc, #92]	@ (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b0:	d009      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a13      	ldr	r2, [pc, #76]	@ (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a11      	ldr	r2, [pc, #68]	@ (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d10c      	bne.n	80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40000400 	.word	0x40000400
 8004208:	40014000 	.word	0x40014000

0800420c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e040      	b.n	80042a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc fd4e 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2224      	movs	r2, #36	@ 0x24
 8004238:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fa38 	bl	80046c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8ff 	bl	800445c <UART_SetConfig>
 800425e:	4603      	mov	r3, r0
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e01b      	b.n	80042a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fab7 	bl	800480c <UART_CheckIdleState>
 800429e:	4603      	mov	r3, r0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	@ 0x28
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d177      	bne.n	80043b0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_UART_Transmit+0x24>
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e070      	b.n	80043b2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2221      	movs	r2, #33	@ 0x21
 80042dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042de:	f7fc fea3 	bl	8001028 <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fc:	d108      	bne.n	8004310 <HAL_UART_Transmit+0x68>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d104      	bne.n	8004310 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	e003      	b.n	8004318 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004318:	e02f      	b.n	800437a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2200      	movs	r2, #0
 8004322:	2180      	movs	r1, #128	@ 0x80
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fb19 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e03b      	b.n	80043b2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	881a      	ldrh	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800434c:	b292      	uxth	r2, r2
 800434e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	3302      	adds	r3, #2
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	e007      	b.n	8004368 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3301      	adds	r3, #1
 8004366:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1c9      	bne.n	800431a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	2140      	movs	r1, #64	@ 0x40
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fae3 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e005      	b.n	80043b2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	e000      	b.n	80043b2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043b0:	2302      	movs	r3, #2
  }
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b08a      	sub	sp, #40	@ 0x28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	4613      	mov	r3, r2
 80043c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d132      	bne.n	8004438 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <HAL_UART_Receive_IT+0x24>
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e02b      	b.n	800443a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d018      	beq.n	8004428 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	613b      	str	r3, [r7, #16]
   return(result);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	69f9      	ldr	r1, [r7, #28]
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	61bb      	str	r3, [r7, #24]
   return(result);
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e6      	bne.n	80043f6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	461a      	mov	r2, r3
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fb02 	bl	8004a38 <UART_Start_Receive_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	e000      	b.n	800443a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	3728      	adds	r7, #40	@ 0x28
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b8a      	ldr	r3, [pc, #552]	@ (80046b0 <UART_SetConfig+0x254>)
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	6979      	ldr	r1, [r7, #20]
 8004490:	430b      	orrs	r3, r1
 8004492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a78      	ldr	r2, [pc, #480]	@ (80046b4 <UART_SetConfig+0x258>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d120      	bne.n	800451a <UART_SetConfig+0xbe>
 80044d8:	4b77      	ldr	r3, [pc, #476]	@ (80046b8 <UART_SetConfig+0x25c>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d817      	bhi.n	8004514 <UART_SetConfig+0xb8>
 80044e4:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <UART_SetConfig+0x90>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	080044fd 	.word	0x080044fd
 80044f0:	08004509 	.word	0x08004509
 80044f4:	0800450f 	.word	0x0800450f
 80044f8:	08004503 	.word	0x08004503
 80044fc:	2300      	movs	r3, #0
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	e01d      	b.n	800453e <UART_SetConfig+0xe2>
 8004502:	2302      	movs	r3, #2
 8004504:	77fb      	strb	r3, [r7, #31]
 8004506:	e01a      	b.n	800453e <UART_SetConfig+0xe2>
 8004508:	2304      	movs	r3, #4
 800450a:	77fb      	strb	r3, [r7, #31]
 800450c:	e017      	b.n	800453e <UART_SetConfig+0xe2>
 800450e:	2308      	movs	r3, #8
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e014      	b.n	800453e <UART_SetConfig+0xe2>
 8004514:	2310      	movs	r3, #16
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e011      	b.n	800453e <UART_SetConfig+0xe2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a67      	ldr	r2, [pc, #412]	@ (80046bc <UART_SetConfig+0x260>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d102      	bne.n	800452a <UART_SetConfig+0xce>
 8004524:	2300      	movs	r3, #0
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e009      	b.n	800453e <UART_SetConfig+0xe2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a64      	ldr	r2, [pc, #400]	@ (80046c0 <UART_SetConfig+0x264>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d102      	bne.n	800453a <UART_SetConfig+0xde>
 8004534:	2300      	movs	r3, #0
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e001      	b.n	800453e <UART_SetConfig+0xe2>
 800453a:	2310      	movs	r3, #16
 800453c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004546:	d15a      	bne.n	80045fe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004548:	7ffb      	ldrb	r3, [r7, #31]
 800454a:	2b08      	cmp	r3, #8
 800454c:	d827      	bhi.n	800459e <UART_SetConfig+0x142>
 800454e:	a201      	add	r2, pc, #4	@ (adr r2, 8004554 <UART_SetConfig+0xf8>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004579 	.word	0x08004579
 8004558:	08004581 	.word	0x08004581
 800455c:	08004589 	.word	0x08004589
 8004560:	0800459f 	.word	0x0800459f
 8004564:	0800458f 	.word	0x0800458f
 8004568:	0800459f 	.word	0x0800459f
 800456c:	0800459f 	.word	0x0800459f
 8004570:	0800459f 	.word	0x0800459f
 8004574:	08004597 	.word	0x08004597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004578:	f7fe fa10 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 800457c:	61b8      	str	r0, [r7, #24]
        break;
 800457e:	e013      	b.n	80045a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004580:	f7fe fa2e 	bl	80029e0 <HAL_RCC_GetPCLK2Freq>
 8004584:	61b8      	str	r0, [r7, #24]
        break;
 8004586:	e00f      	b.n	80045a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004588:	4b4e      	ldr	r3, [pc, #312]	@ (80046c4 <UART_SetConfig+0x268>)
 800458a:	61bb      	str	r3, [r7, #24]
        break;
 800458c:	e00c      	b.n	80045a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458e:	f7fe f9a5 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 8004592:	61b8      	str	r0, [r7, #24]
        break;
 8004594:	e008      	b.n	80045a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800459a:	61bb      	str	r3, [r7, #24]
        break;
 800459c:	e004      	b.n	80045a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	77bb      	strb	r3, [r7, #30]
        break;
 80045a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d074      	beq.n	8004698 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	005a      	lsls	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	441a      	add	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d916      	bls.n	80045f8 <UART_SetConfig+0x19c>
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d0:	d212      	bcs.n	80045f8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f023 030f 	bic.w	r3, r3, #15
 80045da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	89fb      	ldrh	r3, [r7, #14]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	89fa      	ldrh	r2, [r7, #14]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	e04f      	b.n	8004698 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	77bb      	strb	r3, [r7, #30]
 80045fc:	e04c      	b.n	8004698 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045fe:	7ffb      	ldrb	r3, [r7, #31]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d828      	bhi.n	8004656 <UART_SetConfig+0x1fa>
 8004604:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <UART_SetConfig+0x1b0>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	08004631 	.word	0x08004631
 8004610:	08004639 	.word	0x08004639
 8004614:	08004641 	.word	0x08004641
 8004618:	08004657 	.word	0x08004657
 800461c:	08004647 	.word	0x08004647
 8004620:	08004657 	.word	0x08004657
 8004624:	08004657 	.word	0x08004657
 8004628:	08004657 	.word	0x08004657
 800462c:	0800464f 	.word	0x0800464f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004630:	f7fe f9b4 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8004634:	61b8      	str	r0, [r7, #24]
        break;
 8004636:	e013      	b.n	8004660 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004638:	f7fe f9d2 	bl	80029e0 <HAL_RCC_GetPCLK2Freq>
 800463c:	61b8      	str	r0, [r7, #24]
        break;
 800463e:	e00f      	b.n	8004660 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004640:	4b20      	ldr	r3, [pc, #128]	@ (80046c4 <UART_SetConfig+0x268>)
 8004642:	61bb      	str	r3, [r7, #24]
        break;
 8004644:	e00c      	b.n	8004660 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004646:	f7fe f949 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800464a:	61b8      	str	r0, [r7, #24]
        break;
 800464c:	e008      	b.n	8004660 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004652:	61bb      	str	r3, [r7, #24]
        break;
 8004654:	e004      	b.n	8004660 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	77bb      	strb	r3, [r7, #30]
        break;
 800465e:	bf00      	nop
    }

    if (pclk != 0U)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d018      	beq.n	8004698 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	085a      	lsrs	r2, r3, #1
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	441a      	add	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b0f      	cmp	r3, #15
 800467e:	d909      	bls.n	8004694 <UART_SetConfig+0x238>
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004686:	d205      	bcs.n	8004694 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	e001      	b.n	8004698 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	efff69f3 	.word	0xefff69f3
 80046b4:	40013800 	.word	0x40013800
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40004400 	.word	0x40004400
 80046c0:	40004800 	.word	0x40004800
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01a      	beq.n	80047de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047c6:	d10a      	bne.n	80047de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]
  }
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b098      	sub	sp, #96	@ 0x60
 8004810:	af02      	add	r7, sp, #8
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800481c:	f7fc fc04 	bl	8001028 <HAL_GetTick>
 8004820:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b08      	cmp	r3, #8
 800482e:	d12e      	bne.n	800488e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004830:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004838:	2200      	movs	r2, #0
 800483a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f88c 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d021      	beq.n	800488e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800485e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004868:	647b      	str	r3, [r7, #68]	@ 0x44
 800486a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800486e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e6      	bne.n	800484a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e062      	b.n	8004954 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b04      	cmp	r3, #4
 800489a:	d149      	bne.n	8004930 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800489c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a4:	2200      	movs	r2, #0
 80048a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f856 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d03c      	beq.n	8004930 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	623b      	str	r3, [r7, #32]
   return(result);
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e6      	bne.n	80048b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3308      	adds	r3, #8
 80048ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3308      	adds	r3, #8
 8004906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004908:	61fa      	str	r2, [r7, #28]
 800490a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	69b9      	ldr	r1, [r7, #24]
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	617b      	str	r3, [r7, #20]
   return(result);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e5      	bne.n	80048e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e011      	b.n	8004954 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3758      	adds	r7, #88	@ 0x58
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496c:	e04f      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004974:	d04b      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fc fb57 	bl	8001028 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <UART_WaitOnFlagUntilTimeout+0x30>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e04e      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d037      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b80      	cmp	r3, #128	@ 0x80
 80049a2:	d034      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b40      	cmp	r3, #64	@ 0x40
 80049a8:	d031      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d110      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2208      	movs	r2, #8
 80049be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f8ff 	bl	8004bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2208      	movs	r2, #8
 80049ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e029      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049e8:	d111      	bne.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f8e5 	bl	8004bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e00f      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d0a0      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b097      	sub	sp, #92	@ 0x5c
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	88fa      	ldrh	r2, [r7, #6]
 8004a50:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a6a:	d10e      	bne.n	8004a8a <UART_Start_Receive_IT+0x52>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <UART_Start_Receive_IT+0x48>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a7e:	e02d      	b.n	8004adc <UART_Start_Receive_IT+0xa4>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	22ff      	movs	r2, #255	@ 0xff
 8004a84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a88:	e028      	b.n	8004adc <UART_Start_Receive_IT+0xa4>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10d      	bne.n	8004aae <UART_Start_Receive_IT+0x76>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <UART_Start_Receive_IT+0x6c>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	22ff      	movs	r2, #255	@ 0xff
 8004a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aa2:	e01b      	b.n	8004adc <UART_Start_Receive_IT+0xa4>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	227f      	movs	r2, #127	@ 0x7f
 8004aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aac:	e016      	b.n	8004adc <UART_Start_Receive_IT+0xa4>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ab6:	d10d      	bne.n	8004ad4 <UART_Start_Receive_IT+0x9c>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d104      	bne.n	8004aca <UART_Start_Receive_IT+0x92>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	227f      	movs	r2, #127	@ 0x7f
 8004ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ac8:	e008      	b.n	8004adc <UART_Start_Receive_IT+0xa4>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	223f      	movs	r2, #63	@ 0x3f
 8004ace:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ad2:	e003      	b.n	8004adc <UART_Start_Receive_IT+0xa4>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2222      	movs	r2, #34	@ 0x22
 8004ae8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b0c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b0e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e5      	bne.n	8004aec <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b28:	d107      	bne.n	8004b3a <UART_Start_Receive_IT+0x102>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a21      	ldr	r2, [pc, #132]	@ (8004bbc <UART_Start_Receive_IT+0x184>)
 8004b36:	669a      	str	r2, [r3, #104]	@ 0x68
 8004b38:	e002      	b.n	8004b40 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	@ (8004bc0 <UART_Start_Receive_IT+0x188>)
 8004b3e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d019      	beq.n	8004b7c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b68:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e6      	bne.n	8004b48 <UART_Start_Receive_IT+0x110>
 8004b7a:	e018      	b.n	8004bae <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f043 0320 	orr.w	r3, r3, #32
 8004b90:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b9a:	623b      	str	r3, [r7, #32]
 8004b9c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	69f9      	ldr	r1, [r7, #28]
 8004ba0:	6a3a      	ldr	r2, [r7, #32]
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e6      	bne.n	8004b7c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	375c      	adds	r7, #92	@ 0x5c
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	08004e35 	.word	0x08004e35
 8004bc0:	08004c8d 	.word	0x08004c8d

08004bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b095      	sub	sp, #84	@ 0x54
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bea:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e6      	bne.n	8004bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3308      	adds	r3, #8
 8004c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e5      	bne.n	8004bfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d118      	bne.n	8004c6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f023 0310 	bic.w	r3, r3, #16
 8004c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6979      	ldr	r1, [r7, #20]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	613b      	str	r3, [r7, #16]
   return(result);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e6      	bne.n	8004c3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c80:	bf00      	nop
 8004c82:	3754      	adds	r7, #84	@ 0x54
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b09c      	sub	sp, #112	@ 0x70
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ca4:	2b22      	cmp	r3, #34	@ 0x22
 8004ca6:	f040 80b9 	bne.w	8004e1c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004cb0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004cb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004cb8:	b2d9      	uxtb	r1, r3
 8004cba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc4:	400a      	ands	r2, r1
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 809c 	bne.w	8004e2c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e6      	bne.n	8004cf4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3308      	adds	r3, #8
 8004d44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004d46:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e5      	bne.n	8004d26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d018      	beq.n	8004dae <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	623b      	str	r3, [r7, #32]
   return(result);
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e6      	bne.n	8004d7c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d12e      	bne.n	8004e14 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f023 0310 	bic.w	r3, r3, #16
 8004dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	69b9      	ldr	r1, [r7, #24]
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	617b      	str	r3, [r7, #20]
   return(result);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e6      	bne.n	8004dbc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d103      	bne.n	8004e04 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2210      	movs	r2, #16
 8004e02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff fb18 	bl	8004442 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e12:	e00b      	b.n	8004e2c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7fb fc67 	bl	80006e8 <HAL_UART_RxCpltCallback>
}
 8004e1a:	e007      	b.n	8004e2c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0208 	orr.w	r2, r2, #8
 8004e2a:	619a      	str	r2, [r3, #24]
}
 8004e2c:	bf00      	nop
 8004e2e:	3770      	adds	r7, #112	@ 0x70
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b09c      	sub	sp, #112	@ 0x70
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e4c:	2b22      	cmp	r3, #34	@ 0x22
 8004e4e:	f040 80b9 	bne.w	8004fc4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e60:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e62:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004e66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e76:	1c9a      	adds	r2, r3, #2
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 809c 	bne.w	8004fd4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ebc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ec0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ec8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e6      	bne.n	8004e9c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3308      	adds	r3, #8
 8004eec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004eee:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ef4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e5      	bne.n	8004ece <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d018      	beq.n	8004f56 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f44:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e6      	bne.n	8004f24 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d12e      	bne.n	8004fbc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f023 0310 	bic.w	r3, r3, #16
 8004f78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6979      	ldr	r1, [r7, #20]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e6      	bne.n	8004f64 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d103      	bne.n	8004fac <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2210      	movs	r2, #16
 8004faa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff fa44 	bl	8004442 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fba:	e00b      	b.n	8004fd4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fb fb93 	bl	80006e8 <HAL_UART_RxCpltCallback>
}
 8004fc2:	e007      	b.n	8004fd4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0208 	orr.w	r2, r2, #8
 8004fd2:	619a      	str	r2, [r3, #24]
}
 8004fd4:	bf00      	nop
 8004fd6:	3770      	adds	r7, #112	@ 0x70
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <__sflush_r>:
 8004fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe4:	0716      	lsls	r6, r2, #28
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	460c      	mov	r4, r1
 8004fea:	d454      	bmi.n	8005096 <__sflush_r+0xba>
 8004fec:	684b      	ldr	r3, [r1, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	dc02      	bgt.n	8004ff8 <__sflush_r+0x1c>
 8004ff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	dd48      	ble.n	800508a <__sflush_r+0xae>
 8004ff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ffa:	2e00      	cmp	r6, #0
 8004ffc:	d045      	beq.n	800508a <__sflush_r+0xae>
 8004ffe:	2300      	movs	r3, #0
 8005000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005004:	682f      	ldr	r7, [r5, #0]
 8005006:	6a21      	ldr	r1, [r4, #32]
 8005008:	602b      	str	r3, [r5, #0]
 800500a:	d030      	beq.n	800506e <__sflush_r+0x92>
 800500c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	0759      	lsls	r1, r3, #29
 8005012:	d505      	bpl.n	8005020 <__sflush_r+0x44>
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800501a:	b10b      	cbz	r3, 8005020 <__sflush_r+0x44>
 800501c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800501e:	1ad2      	subs	r2, r2, r3
 8005020:	2300      	movs	r3, #0
 8005022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005024:	6a21      	ldr	r1, [r4, #32]
 8005026:	4628      	mov	r0, r5
 8005028:	47b0      	blx	r6
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	d106      	bne.n	800503e <__sflush_r+0x62>
 8005030:	6829      	ldr	r1, [r5, #0]
 8005032:	291d      	cmp	r1, #29
 8005034:	d82b      	bhi.n	800508e <__sflush_r+0xb2>
 8005036:	4a2a      	ldr	r2, [pc, #168]	@ (80050e0 <__sflush_r+0x104>)
 8005038:	410a      	asrs	r2, r1
 800503a:	07d6      	lsls	r6, r2, #31
 800503c:	d427      	bmi.n	800508e <__sflush_r+0xb2>
 800503e:	2200      	movs	r2, #0
 8005040:	6062      	str	r2, [r4, #4]
 8005042:	04d9      	lsls	r1, r3, #19
 8005044:	6922      	ldr	r2, [r4, #16]
 8005046:	6022      	str	r2, [r4, #0]
 8005048:	d504      	bpl.n	8005054 <__sflush_r+0x78>
 800504a:	1c42      	adds	r2, r0, #1
 800504c:	d101      	bne.n	8005052 <__sflush_r+0x76>
 800504e:	682b      	ldr	r3, [r5, #0]
 8005050:	b903      	cbnz	r3, 8005054 <__sflush_r+0x78>
 8005052:	6560      	str	r0, [r4, #84]	@ 0x54
 8005054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005056:	602f      	str	r7, [r5, #0]
 8005058:	b1b9      	cbz	r1, 800508a <__sflush_r+0xae>
 800505a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800505e:	4299      	cmp	r1, r3
 8005060:	d002      	beq.n	8005068 <__sflush_r+0x8c>
 8005062:	4628      	mov	r0, r5
 8005064:	f000 fa2e 	bl	80054c4 <_free_r>
 8005068:	2300      	movs	r3, #0
 800506a:	6363      	str	r3, [r4, #52]	@ 0x34
 800506c:	e00d      	b.n	800508a <__sflush_r+0xae>
 800506e:	2301      	movs	r3, #1
 8005070:	4628      	mov	r0, r5
 8005072:	47b0      	blx	r6
 8005074:	4602      	mov	r2, r0
 8005076:	1c50      	adds	r0, r2, #1
 8005078:	d1c9      	bne.n	800500e <__sflush_r+0x32>
 800507a:	682b      	ldr	r3, [r5, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0c6      	beq.n	800500e <__sflush_r+0x32>
 8005080:	2b1d      	cmp	r3, #29
 8005082:	d001      	beq.n	8005088 <__sflush_r+0xac>
 8005084:	2b16      	cmp	r3, #22
 8005086:	d11e      	bne.n	80050c6 <__sflush_r+0xea>
 8005088:	602f      	str	r7, [r5, #0]
 800508a:	2000      	movs	r0, #0
 800508c:	e022      	b.n	80050d4 <__sflush_r+0xf8>
 800508e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005092:	b21b      	sxth	r3, r3
 8005094:	e01b      	b.n	80050ce <__sflush_r+0xf2>
 8005096:	690f      	ldr	r7, [r1, #16]
 8005098:	2f00      	cmp	r7, #0
 800509a:	d0f6      	beq.n	800508a <__sflush_r+0xae>
 800509c:	0793      	lsls	r3, r2, #30
 800509e:	680e      	ldr	r6, [r1, #0]
 80050a0:	bf08      	it	eq
 80050a2:	694b      	ldreq	r3, [r1, #20]
 80050a4:	600f      	str	r7, [r1, #0]
 80050a6:	bf18      	it	ne
 80050a8:	2300      	movne	r3, #0
 80050aa:	eba6 0807 	sub.w	r8, r6, r7
 80050ae:	608b      	str	r3, [r1, #8]
 80050b0:	f1b8 0f00 	cmp.w	r8, #0
 80050b4:	dde9      	ble.n	800508a <__sflush_r+0xae>
 80050b6:	6a21      	ldr	r1, [r4, #32]
 80050b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050ba:	4643      	mov	r3, r8
 80050bc:	463a      	mov	r2, r7
 80050be:	4628      	mov	r0, r5
 80050c0:	47b0      	blx	r6
 80050c2:	2800      	cmp	r0, #0
 80050c4:	dc08      	bgt.n	80050d8 <__sflush_r+0xfc>
 80050c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ce:	81a3      	strh	r3, [r4, #12]
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d8:	4407      	add	r7, r0
 80050da:	eba8 0800 	sub.w	r8, r8, r0
 80050de:	e7e7      	b.n	80050b0 <__sflush_r+0xd4>
 80050e0:	dfbffffe 	.word	0xdfbffffe

080050e4 <_fflush_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	690b      	ldr	r3, [r1, #16]
 80050e8:	4605      	mov	r5, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	b913      	cbnz	r3, 80050f4 <_fflush_r+0x10>
 80050ee:	2500      	movs	r5, #0
 80050f0:	4628      	mov	r0, r5
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	b118      	cbz	r0, 80050fe <_fflush_r+0x1a>
 80050f6:	6a03      	ldr	r3, [r0, #32]
 80050f8:	b90b      	cbnz	r3, 80050fe <_fflush_r+0x1a>
 80050fa:	f000 f8bb 	bl	8005274 <__sinit>
 80050fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f3      	beq.n	80050ee <_fflush_r+0xa>
 8005106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005108:	07d0      	lsls	r0, r2, #31
 800510a:	d404      	bmi.n	8005116 <_fflush_r+0x32>
 800510c:	0599      	lsls	r1, r3, #22
 800510e:	d402      	bmi.n	8005116 <_fflush_r+0x32>
 8005110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005112:	f000 f9d4 	bl	80054be <__retarget_lock_acquire_recursive>
 8005116:	4628      	mov	r0, r5
 8005118:	4621      	mov	r1, r4
 800511a:	f7ff ff5f 	bl	8004fdc <__sflush_r>
 800511e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005120:	07da      	lsls	r2, r3, #31
 8005122:	4605      	mov	r5, r0
 8005124:	d4e4      	bmi.n	80050f0 <_fflush_r+0xc>
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	059b      	lsls	r3, r3, #22
 800512a:	d4e1      	bmi.n	80050f0 <_fflush_r+0xc>
 800512c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800512e:	f000 f9c7 	bl	80054c0 <__retarget_lock_release_recursive>
 8005132:	e7dd      	b.n	80050f0 <_fflush_r+0xc>

08005134 <fflush>:
 8005134:	4601      	mov	r1, r0
 8005136:	b920      	cbnz	r0, 8005142 <fflush+0xe>
 8005138:	4a04      	ldr	r2, [pc, #16]	@ (800514c <fflush+0x18>)
 800513a:	4905      	ldr	r1, [pc, #20]	@ (8005150 <fflush+0x1c>)
 800513c:	4805      	ldr	r0, [pc, #20]	@ (8005154 <fflush+0x20>)
 800513e:	f000 b8b1 	b.w	80052a4 <_fwalk_sglue>
 8005142:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <fflush+0x24>)
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	f7ff bfcd 	b.w	80050e4 <_fflush_r>
 800514a:	bf00      	nop
 800514c:	2000000c 	.word	0x2000000c
 8005150:	080050e5 	.word	0x080050e5
 8005154:	2000001c 	.word	0x2000001c
 8005158:	20000018 	.word	0x20000018

0800515c <std>:
 800515c:	2300      	movs	r3, #0
 800515e:	b510      	push	{r4, lr}
 8005160:	4604      	mov	r4, r0
 8005162:	e9c0 3300 	strd	r3, r3, [r0]
 8005166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800516a:	6083      	str	r3, [r0, #8]
 800516c:	8181      	strh	r1, [r0, #12]
 800516e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005170:	81c2      	strh	r2, [r0, #14]
 8005172:	6183      	str	r3, [r0, #24]
 8005174:	4619      	mov	r1, r3
 8005176:	2208      	movs	r2, #8
 8005178:	305c      	adds	r0, #92	@ 0x5c
 800517a:	f000 f926 	bl	80053ca <memset>
 800517e:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <std+0x58>)
 8005180:	6263      	str	r3, [r4, #36]	@ 0x24
 8005182:	4b0d      	ldr	r3, [pc, #52]	@ (80051b8 <std+0x5c>)
 8005184:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005186:	4b0d      	ldr	r3, [pc, #52]	@ (80051bc <std+0x60>)
 8005188:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800518a:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <std+0x64>)
 800518c:	6323      	str	r3, [r4, #48]	@ 0x30
 800518e:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <std+0x68>)
 8005190:	6224      	str	r4, [r4, #32]
 8005192:	429c      	cmp	r4, r3
 8005194:	d006      	beq.n	80051a4 <std+0x48>
 8005196:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800519a:	4294      	cmp	r4, r2
 800519c:	d002      	beq.n	80051a4 <std+0x48>
 800519e:	33d0      	adds	r3, #208	@ 0xd0
 80051a0:	429c      	cmp	r4, r3
 80051a2:	d105      	bne.n	80051b0 <std+0x54>
 80051a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ac:	f000 b986 	b.w	80054bc <__retarget_lock_init_recursive>
 80051b0:	bd10      	pop	{r4, pc}
 80051b2:	bf00      	nop
 80051b4:	08005345 	.word	0x08005345
 80051b8:	08005367 	.word	0x08005367
 80051bc:	0800539f 	.word	0x0800539f
 80051c0:	080053c3 	.word	0x080053c3
 80051c4:	20000204 	.word	0x20000204

080051c8 <stdio_exit_handler>:
 80051c8:	4a02      	ldr	r2, [pc, #8]	@ (80051d4 <stdio_exit_handler+0xc>)
 80051ca:	4903      	ldr	r1, [pc, #12]	@ (80051d8 <stdio_exit_handler+0x10>)
 80051cc:	4803      	ldr	r0, [pc, #12]	@ (80051dc <stdio_exit_handler+0x14>)
 80051ce:	f000 b869 	b.w	80052a4 <_fwalk_sglue>
 80051d2:	bf00      	nop
 80051d4:	2000000c 	.word	0x2000000c
 80051d8:	080050e5 	.word	0x080050e5
 80051dc:	2000001c 	.word	0x2000001c

080051e0 <cleanup_stdio>:
 80051e0:	6841      	ldr	r1, [r0, #4]
 80051e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <cleanup_stdio+0x34>)
 80051e4:	4299      	cmp	r1, r3
 80051e6:	b510      	push	{r4, lr}
 80051e8:	4604      	mov	r4, r0
 80051ea:	d001      	beq.n	80051f0 <cleanup_stdio+0x10>
 80051ec:	f7ff ff7a 	bl	80050e4 <_fflush_r>
 80051f0:	68a1      	ldr	r1, [r4, #8]
 80051f2:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <cleanup_stdio+0x38>)
 80051f4:	4299      	cmp	r1, r3
 80051f6:	d002      	beq.n	80051fe <cleanup_stdio+0x1e>
 80051f8:	4620      	mov	r0, r4
 80051fa:	f7ff ff73 	bl	80050e4 <_fflush_r>
 80051fe:	68e1      	ldr	r1, [r4, #12]
 8005200:	4b06      	ldr	r3, [pc, #24]	@ (800521c <cleanup_stdio+0x3c>)
 8005202:	4299      	cmp	r1, r3
 8005204:	d004      	beq.n	8005210 <cleanup_stdio+0x30>
 8005206:	4620      	mov	r0, r4
 8005208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520c:	f7ff bf6a 	b.w	80050e4 <_fflush_r>
 8005210:	bd10      	pop	{r4, pc}
 8005212:	bf00      	nop
 8005214:	20000204 	.word	0x20000204
 8005218:	2000026c 	.word	0x2000026c
 800521c:	200002d4 	.word	0x200002d4

08005220 <global_stdio_init.part.0>:
 8005220:	b510      	push	{r4, lr}
 8005222:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <global_stdio_init.part.0+0x30>)
 8005224:	4c0b      	ldr	r4, [pc, #44]	@ (8005254 <global_stdio_init.part.0+0x34>)
 8005226:	4a0c      	ldr	r2, [pc, #48]	@ (8005258 <global_stdio_init.part.0+0x38>)
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	4620      	mov	r0, r4
 800522c:	2200      	movs	r2, #0
 800522e:	2104      	movs	r1, #4
 8005230:	f7ff ff94 	bl	800515c <std>
 8005234:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005238:	2201      	movs	r2, #1
 800523a:	2109      	movs	r1, #9
 800523c:	f7ff ff8e 	bl	800515c <std>
 8005240:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005244:	2202      	movs	r2, #2
 8005246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524a:	2112      	movs	r1, #18
 800524c:	f7ff bf86 	b.w	800515c <std>
 8005250:	2000033c 	.word	0x2000033c
 8005254:	20000204 	.word	0x20000204
 8005258:	080051c9 	.word	0x080051c9

0800525c <__sfp_lock_acquire>:
 800525c:	4801      	ldr	r0, [pc, #4]	@ (8005264 <__sfp_lock_acquire+0x8>)
 800525e:	f000 b92e 	b.w	80054be <__retarget_lock_acquire_recursive>
 8005262:	bf00      	nop
 8005264:	20000345 	.word	0x20000345

08005268 <__sfp_lock_release>:
 8005268:	4801      	ldr	r0, [pc, #4]	@ (8005270 <__sfp_lock_release+0x8>)
 800526a:	f000 b929 	b.w	80054c0 <__retarget_lock_release_recursive>
 800526e:	bf00      	nop
 8005270:	20000345 	.word	0x20000345

08005274 <__sinit>:
 8005274:	b510      	push	{r4, lr}
 8005276:	4604      	mov	r4, r0
 8005278:	f7ff fff0 	bl	800525c <__sfp_lock_acquire>
 800527c:	6a23      	ldr	r3, [r4, #32]
 800527e:	b11b      	cbz	r3, 8005288 <__sinit+0x14>
 8005280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005284:	f7ff bff0 	b.w	8005268 <__sfp_lock_release>
 8005288:	4b04      	ldr	r3, [pc, #16]	@ (800529c <__sinit+0x28>)
 800528a:	6223      	str	r3, [r4, #32]
 800528c:	4b04      	ldr	r3, [pc, #16]	@ (80052a0 <__sinit+0x2c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f5      	bne.n	8005280 <__sinit+0xc>
 8005294:	f7ff ffc4 	bl	8005220 <global_stdio_init.part.0>
 8005298:	e7f2      	b.n	8005280 <__sinit+0xc>
 800529a:	bf00      	nop
 800529c:	080051e1 	.word	0x080051e1
 80052a0:	2000033c 	.word	0x2000033c

080052a4 <_fwalk_sglue>:
 80052a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052a8:	4607      	mov	r7, r0
 80052aa:	4688      	mov	r8, r1
 80052ac:	4614      	mov	r4, r2
 80052ae:	2600      	movs	r6, #0
 80052b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052b4:	f1b9 0901 	subs.w	r9, r9, #1
 80052b8:	d505      	bpl.n	80052c6 <_fwalk_sglue+0x22>
 80052ba:	6824      	ldr	r4, [r4, #0]
 80052bc:	2c00      	cmp	r4, #0
 80052be:	d1f7      	bne.n	80052b0 <_fwalk_sglue+0xc>
 80052c0:	4630      	mov	r0, r6
 80052c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052c6:	89ab      	ldrh	r3, [r5, #12]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d907      	bls.n	80052dc <_fwalk_sglue+0x38>
 80052cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052d0:	3301      	adds	r3, #1
 80052d2:	d003      	beq.n	80052dc <_fwalk_sglue+0x38>
 80052d4:	4629      	mov	r1, r5
 80052d6:	4638      	mov	r0, r7
 80052d8:	47c0      	blx	r8
 80052da:	4306      	orrs	r6, r0
 80052dc:	3568      	adds	r5, #104	@ 0x68
 80052de:	e7e9      	b.n	80052b4 <_fwalk_sglue+0x10>

080052e0 <iprintf>:
 80052e0:	b40f      	push	{r0, r1, r2, r3}
 80052e2:	b507      	push	{r0, r1, r2, lr}
 80052e4:	4906      	ldr	r1, [pc, #24]	@ (8005300 <iprintf+0x20>)
 80052e6:	ab04      	add	r3, sp, #16
 80052e8:	6808      	ldr	r0, [r1, #0]
 80052ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ee:	6881      	ldr	r1, [r0, #8]
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	f000 fb61 	bl	80059b8 <_vfiprintf_r>
 80052f6:	b003      	add	sp, #12
 80052f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052fc:	b004      	add	sp, #16
 80052fe:	4770      	bx	lr
 8005300:	20000018 	.word	0x20000018

08005304 <siprintf>:
 8005304:	b40e      	push	{r1, r2, r3}
 8005306:	b500      	push	{lr}
 8005308:	b09c      	sub	sp, #112	@ 0x70
 800530a:	ab1d      	add	r3, sp, #116	@ 0x74
 800530c:	9002      	str	r0, [sp, #8]
 800530e:	9006      	str	r0, [sp, #24]
 8005310:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005314:	4809      	ldr	r0, [pc, #36]	@ (800533c <siprintf+0x38>)
 8005316:	9107      	str	r1, [sp, #28]
 8005318:	9104      	str	r1, [sp, #16]
 800531a:	4909      	ldr	r1, [pc, #36]	@ (8005340 <siprintf+0x3c>)
 800531c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005320:	9105      	str	r1, [sp, #20]
 8005322:	6800      	ldr	r0, [r0, #0]
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	a902      	add	r1, sp, #8
 8005328:	f000 fa20 	bl	800576c <_svfiprintf_r>
 800532c:	9b02      	ldr	r3, [sp, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	b01c      	add	sp, #112	@ 0x70
 8005334:	f85d eb04 	ldr.w	lr, [sp], #4
 8005338:	b003      	add	sp, #12
 800533a:	4770      	bx	lr
 800533c:	20000018 	.word	0x20000018
 8005340:	ffff0208 	.word	0xffff0208

08005344 <__sread>:
 8005344:	b510      	push	{r4, lr}
 8005346:	460c      	mov	r4, r1
 8005348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534c:	f000 f868 	bl	8005420 <_read_r>
 8005350:	2800      	cmp	r0, #0
 8005352:	bfab      	itete	ge
 8005354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005356:	89a3      	ldrhlt	r3, [r4, #12]
 8005358:	181b      	addge	r3, r3, r0
 800535a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800535e:	bfac      	ite	ge
 8005360:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005362:	81a3      	strhlt	r3, [r4, #12]
 8005364:	bd10      	pop	{r4, pc}

08005366 <__swrite>:
 8005366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536a:	461f      	mov	r7, r3
 800536c:	898b      	ldrh	r3, [r1, #12]
 800536e:	05db      	lsls	r3, r3, #23
 8005370:	4605      	mov	r5, r0
 8005372:	460c      	mov	r4, r1
 8005374:	4616      	mov	r6, r2
 8005376:	d505      	bpl.n	8005384 <__swrite+0x1e>
 8005378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537c:	2302      	movs	r3, #2
 800537e:	2200      	movs	r2, #0
 8005380:	f000 f83c 	bl	80053fc <_lseek_r>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800538a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	4632      	mov	r2, r6
 8005392:	463b      	mov	r3, r7
 8005394:	4628      	mov	r0, r5
 8005396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539a:	f000 b853 	b.w	8005444 <_write_r>

0800539e <__sseek>:
 800539e:	b510      	push	{r4, lr}
 80053a0:	460c      	mov	r4, r1
 80053a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a6:	f000 f829 	bl	80053fc <_lseek_r>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	bf15      	itete	ne
 80053b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ba:	81a3      	strheq	r3, [r4, #12]
 80053bc:	bf18      	it	ne
 80053be:	81a3      	strhne	r3, [r4, #12]
 80053c0:	bd10      	pop	{r4, pc}

080053c2 <__sclose>:
 80053c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c6:	f000 b809 	b.w	80053dc <_close_r>

080053ca <memset>:
 80053ca:	4402      	add	r2, r0
 80053cc:	4603      	mov	r3, r0
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d100      	bne.n	80053d4 <memset+0xa>
 80053d2:	4770      	bx	lr
 80053d4:	f803 1b01 	strb.w	r1, [r3], #1
 80053d8:	e7f9      	b.n	80053ce <memset+0x4>
	...

080053dc <_close_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4d06      	ldr	r5, [pc, #24]	@ (80053f8 <_close_r+0x1c>)
 80053e0:	2300      	movs	r3, #0
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	602b      	str	r3, [r5, #0]
 80053e8:	f7fb fd1e 	bl	8000e28 <_close>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_close_r+0x1a>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_close_r+0x1a>
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	20000340 	.word	0x20000340

080053fc <_lseek_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d07      	ldr	r5, [pc, #28]	@ (800541c <_lseek_r+0x20>)
 8005400:	4604      	mov	r4, r0
 8005402:	4608      	mov	r0, r1
 8005404:	4611      	mov	r1, r2
 8005406:	2200      	movs	r2, #0
 8005408:	602a      	str	r2, [r5, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	f7fb fd33 	bl	8000e76 <_lseek>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_lseek_r+0x1e>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_lseek_r+0x1e>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	20000340 	.word	0x20000340

08005420 <_read_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4d07      	ldr	r5, [pc, #28]	@ (8005440 <_read_r+0x20>)
 8005424:	4604      	mov	r4, r0
 8005426:	4608      	mov	r0, r1
 8005428:	4611      	mov	r1, r2
 800542a:	2200      	movs	r2, #0
 800542c:	602a      	str	r2, [r5, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	f7fb fcc1 	bl	8000db6 <_read>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_read_r+0x1e>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	b103      	cbz	r3, 800543e <_read_r+0x1e>
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	20000340 	.word	0x20000340

08005444 <_write_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d07      	ldr	r5, [pc, #28]	@ (8005464 <_write_r+0x20>)
 8005448:	4604      	mov	r4, r0
 800544a:	4608      	mov	r0, r1
 800544c:	4611      	mov	r1, r2
 800544e:	2200      	movs	r2, #0
 8005450:	602a      	str	r2, [r5, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	f7fb fccc 	bl	8000df0 <_write>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_write_r+0x1e>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_write_r+0x1e>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	20000340 	.word	0x20000340

08005468 <__errno>:
 8005468:	4b01      	ldr	r3, [pc, #4]	@ (8005470 <__errno+0x8>)
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000018 	.word	0x20000018

08005474 <__libc_init_array>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4d0d      	ldr	r5, [pc, #52]	@ (80054ac <__libc_init_array+0x38>)
 8005478:	4c0d      	ldr	r4, [pc, #52]	@ (80054b0 <__libc_init_array+0x3c>)
 800547a:	1b64      	subs	r4, r4, r5
 800547c:	10a4      	asrs	r4, r4, #2
 800547e:	2600      	movs	r6, #0
 8005480:	42a6      	cmp	r6, r4
 8005482:	d109      	bne.n	8005498 <__libc_init_array+0x24>
 8005484:	4d0b      	ldr	r5, [pc, #44]	@ (80054b4 <__libc_init_array+0x40>)
 8005486:	4c0c      	ldr	r4, [pc, #48]	@ (80054b8 <__libc_init_array+0x44>)
 8005488:	f000 fec2 	bl	8006210 <_init>
 800548c:	1b64      	subs	r4, r4, r5
 800548e:	10a4      	asrs	r4, r4, #2
 8005490:	2600      	movs	r6, #0
 8005492:	42a6      	cmp	r6, r4
 8005494:	d105      	bne.n	80054a2 <__libc_init_array+0x2e>
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	f855 3b04 	ldr.w	r3, [r5], #4
 800549c:	4798      	blx	r3
 800549e:	3601      	adds	r6, #1
 80054a0:	e7ee      	b.n	8005480 <__libc_init_array+0xc>
 80054a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a6:	4798      	blx	r3
 80054a8:	3601      	adds	r6, #1
 80054aa:	e7f2      	b.n	8005492 <__libc_init_array+0x1e>
 80054ac:	080062b4 	.word	0x080062b4
 80054b0:	080062b4 	.word	0x080062b4
 80054b4:	080062b4 	.word	0x080062b4
 80054b8:	080062b8 	.word	0x080062b8

080054bc <__retarget_lock_init_recursive>:
 80054bc:	4770      	bx	lr

080054be <__retarget_lock_acquire_recursive>:
 80054be:	4770      	bx	lr

080054c0 <__retarget_lock_release_recursive>:
 80054c0:	4770      	bx	lr
	...

080054c4 <_free_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4605      	mov	r5, r0
 80054c8:	2900      	cmp	r1, #0
 80054ca:	d041      	beq.n	8005550 <_free_r+0x8c>
 80054cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d0:	1f0c      	subs	r4, r1, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bfb8      	it	lt
 80054d6:	18e4      	addlt	r4, r4, r3
 80054d8:	f000 f8e0 	bl	800569c <__malloc_lock>
 80054dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <_free_r+0x90>)
 80054de:	6813      	ldr	r3, [r2, #0]
 80054e0:	b933      	cbnz	r3, 80054f0 <_free_r+0x2c>
 80054e2:	6063      	str	r3, [r4, #4]
 80054e4:	6014      	str	r4, [r2, #0]
 80054e6:	4628      	mov	r0, r5
 80054e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054ec:	f000 b8dc 	b.w	80056a8 <__malloc_unlock>
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	d908      	bls.n	8005506 <_free_r+0x42>
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	1821      	adds	r1, r4, r0
 80054f8:	428b      	cmp	r3, r1
 80054fa:	bf01      	itttt	eq
 80054fc:	6819      	ldreq	r1, [r3, #0]
 80054fe:	685b      	ldreq	r3, [r3, #4]
 8005500:	1809      	addeq	r1, r1, r0
 8005502:	6021      	streq	r1, [r4, #0]
 8005504:	e7ed      	b.n	80054e2 <_free_r+0x1e>
 8005506:	461a      	mov	r2, r3
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	b10b      	cbz	r3, 8005510 <_free_r+0x4c>
 800550c:	42a3      	cmp	r3, r4
 800550e:	d9fa      	bls.n	8005506 <_free_r+0x42>
 8005510:	6811      	ldr	r1, [r2, #0]
 8005512:	1850      	adds	r0, r2, r1
 8005514:	42a0      	cmp	r0, r4
 8005516:	d10b      	bne.n	8005530 <_free_r+0x6c>
 8005518:	6820      	ldr	r0, [r4, #0]
 800551a:	4401      	add	r1, r0
 800551c:	1850      	adds	r0, r2, r1
 800551e:	4283      	cmp	r3, r0
 8005520:	6011      	str	r1, [r2, #0]
 8005522:	d1e0      	bne.n	80054e6 <_free_r+0x22>
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	6053      	str	r3, [r2, #4]
 800552a:	4408      	add	r0, r1
 800552c:	6010      	str	r0, [r2, #0]
 800552e:	e7da      	b.n	80054e6 <_free_r+0x22>
 8005530:	d902      	bls.n	8005538 <_free_r+0x74>
 8005532:	230c      	movs	r3, #12
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	e7d6      	b.n	80054e6 <_free_r+0x22>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	1821      	adds	r1, r4, r0
 800553c:	428b      	cmp	r3, r1
 800553e:	bf04      	itt	eq
 8005540:	6819      	ldreq	r1, [r3, #0]
 8005542:	685b      	ldreq	r3, [r3, #4]
 8005544:	6063      	str	r3, [r4, #4]
 8005546:	bf04      	itt	eq
 8005548:	1809      	addeq	r1, r1, r0
 800554a:	6021      	streq	r1, [r4, #0]
 800554c:	6054      	str	r4, [r2, #4]
 800554e:	e7ca      	b.n	80054e6 <_free_r+0x22>
 8005550:	bd38      	pop	{r3, r4, r5, pc}
 8005552:	bf00      	nop
 8005554:	2000034c 	.word	0x2000034c

08005558 <sbrk_aligned>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	4e0f      	ldr	r6, [pc, #60]	@ (8005598 <sbrk_aligned+0x40>)
 800555c:	460c      	mov	r4, r1
 800555e:	6831      	ldr	r1, [r6, #0]
 8005560:	4605      	mov	r5, r0
 8005562:	b911      	cbnz	r1, 800556a <sbrk_aligned+0x12>
 8005564:	f000 fd7c 	bl	8006060 <_sbrk_r>
 8005568:	6030      	str	r0, [r6, #0]
 800556a:	4621      	mov	r1, r4
 800556c:	4628      	mov	r0, r5
 800556e:	f000 fd77 	bl	8006060 <_sbrk_r>
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	d103      	bne.n	800557e <sbrk_aligned+0x26>
 8005576:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800557a:	4620      	mov	r0, r4
 800557c:	bd70      	pop	{r4, r5, r6, pc}
 800557e:	1cc4      	adds	r4, r0, #3
 8005580:	f024 0403 	bic.w	r4, r4, #3
 8005584:	42a0      	cmp	r0, r4
 8005586:	d0f8      	beq.n	800557a <sbrk_aligned+0x22>
 8005588:	1a21      	subs	r1, r4, r0
 800558a:	4628      	mov	r0, r5
 800558c:	f000 fd68 	bl	8006060 <_sbrk_r>
 8005590:	3001      	adds	r0, #1
 8005592:	d1f2      	bne.n	800557a <sbrk_aligned+0x22>
 8005594:	e7ef      	b.n	8005576 <sbrk_aligned+0x1e>
 8005596:	bf00      	nop
 8005598:	20000348 	.word	0x20000348

0800559c <_malloc_r>:
 800559c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055a0:	1ccd      	adds	r5, r1, #3
 80055a2:	f025 0503 	bic.w	r5, r5, #3
 80055a6:	3508      	adds	r5, #8
 80055a8:	2d0c      	cmp	r5, #12
 80055aa:	bf38      	it	cc
 80055ac:	250c      	movcc	r5, #12
 80055ae:	2d00      	cmp	r5, #0
 80055b0:	4606      	mov	r6, r0
 80055b2:	db01      	blt.n	80055b8 <_malloc_r+0x1c>
 80055b4:	42a9      	cmp	r1, r5
 80055b6:	d904      	bls.n	80055c2 <_malloc_r+0x26>
 80055b8:	230c      	movs	r3, #12
 80055ba:	6033      	str	r3, [r6, #0]
 80055bc:	2000      	movs	r0, #0
 80055be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005698 <_malloc_r+0xfc>
 80055c6:	f000 f869 	bl	800569c <__malloc_lock>
 80055ca:	f8d8 3000 	ldr.w	r3, [r8]
 80055ce:	461c      	mov	r4, r3
 80055d0:	bb44      	cbnz	r4, 8005624 <_malloc_r+0x88>
 80055d2:	4629      	mov	r1, r5
 80055d4:	4630      	mov	r0, r6
 80055d6:	f7ff ffbf 	bl	8005558 <sbrk_aligned>
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	4604      	mov	r4, r0
 80055de:	d158      	bne.n	8005692 <_malloc_r+0xf6>
 80055e0:	f8d8 4000 	ldr.w	r4, [r8]
 80055e4:	4627      	mov	r7, r4
 80055e6:	2f00      	cmp	r7, #0
 80055e8:	d143      	bne.n	8005672 <_malloc_r+0xd6>
 80055ea:	2c00      	cmp	r4, #0
 80055ec:	d04b      	beq.n	8005686 <_malloc_r+0xea>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	4639      	mov	r1, r7
 80055f2:	4630      	mov	r0, r6
 80055f4:	eb04 0903 	add.w	r9, r4, r3
 80055f8:	f000 fd32 	bl	8006060 <_sbrk_r>
 80055fc:	4581      	cmp	r9, r0
 80055fe:	d142      	bne.n	8005686 <_malloc_r+0xea>
 8005600:	6821      	ldr	r1, [r4, #0]
 8005602:	1a6d      	subs	r5, r5, r1
 8005604:	4629      	mov	r1, r5
 8005606:	4630      	mov	r0, r6
 8005608:	f7ff ffa6 	bl	8005558 <sbrk_aligned>
 800560c:	3001      	adds	r0, #1
 800560e:	d03a      	beq.n	8005686 <_malloc_r+0xea>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	442b      	add	r3, r5
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	f8d8 3000 	ldr.w	r3, [r8]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	bb62      	cbnz	r2, 8005678 <_malloc_r+0xdc>
 800561e:	f8c8 7000 	str.w	r7, [r8]
 8005622:	e00f      	b.n	8005644 <_malloc_r+0xa8>
 8005624:	6822      	ldr	r2, [r4, #0]
 8005626:	1b52      	subs	r2, r2, r5
 8005628:	d420      	bmi.n	800566c <_malloc_r+0xd0>
 800562a:	2a0b      	cmp	r2, #11
 800562c:	d917      	bls.n	800565e <_malloc_r+0xc2>
 800562e:	1961      	adds	r1, r4, r5
 8005630:	42a3      	cmp	r3, r4
 8005632:	6025      	str	r5, [r4, #0]
 8005634:	bf18      	it	ne
 8005636:	6059      	strne	r1, [r3, #4]
 8005638:	6863      	ldr	r3, [r4, #4]
 800563a:	bf08      	it	eq
 800563c:	f8c8 1000 	streq.w	r1, [r8]
 8005640:	5162      	str	r2, [r4, r5]
 8005642:	604b      	str	r3, [r1, #4]
 8005644:	4630      	mov	r0, r6
 8005646:	f000 f82f 	bl	80056a8 <__malloc_unlock>
 800564a:	f104 000b 	add.w	r0, r4, #11
 800564e:	1d23      	adds	r3, r4, #4
 8005650:	f020 0007 	bic.w	r0, r0, #7
 8005654:	1ac2      	subs	r2, r0, r3
 8005656:	bf1c      	itt	ne
 8005658:	1a1b      	subne	r3, r3, r0
 800565a:	50a3      	strne	r3, [r4, r2]
 800565c:	e7af      	b.n	80055be <_malloc_r+0x22>
 800565e:	6862      	ldr	r2, [r4, #4]
 8005660:	42a3      	cmp	r3, r4
 8005662:	bf0c      	ite	eq
 8005664:	f8c8 2000 	streq.w	r2, [r8]
 8005668:	605a      	strne	r2, [r3, #4]
 800566a:	e7eb      	b.n	8005644 <_malloc_r+0xa8>
 800566c:	4623      	mov	r3, r4
 800566e:	6864      	ldr	r4, [r4, #4]
 8005670:	e7ae      	b.n	80055d0 <_malloc_r+0x34>
 8005672:	463c      	mov	r4, r7
 8005674:	687f      	ldr	r7, [r7, #4]
 8005676:	e7b6      	b.n	80055e6 <_malloc_r+0x4a>
 8005678:	461a      	mov	r2, r3
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	42a3      	cmp	r3, r4
 800567e:	d1fb      	bne.n	8005678 <_malloc_r+0xdc>
 8005680:	2300      	movs	r3, #0
 8005682:	6053      	str	r3, [r2, #4]
 8005684:	e7de      	b.n	8005644 <_malloc_r+0xa8>
 8005686:	230c      	movs	r3, #12
 8005688:	6033      	str	r3, [r6, #0]
 800568a:	4630      	mov	r0, r6
 800568c:	f000 f80c 	bl	80056a8 <__malloc_unlock>
 8005690:	e794      	b.n	80055bc <_malloc_r+0x20>
 8005692:	6005      	str	r5, [r0, #0]
 8005694:	e7d6      	b.n	8005644 <_malloc_r+0xa8>
 8005696:	bf00      	nop
 8005698:	2000034c 	.word	0x2000034c

0800569c <__malloc_lock>:
 800569c:	4801      	ldr	r0, [pc, #4]	@ (80056a4 <__malloc_lock+0x8>)
 800569e:	f7ff bf0e 	b.w	80054be <__retarget_lock_acquire_recursive>
 80056a2:	bf00      	nop
 80056a4:	20000344 	.word	0x20000344

080056a8 <__malloc_unlock>:
 80056a8:	4801      	ldr	r0, [pc, #4]	@ (80056b0 <__malloc_unlock+0x8>)
 80056aa:	f7ff bf09 	b.w	80054c0 <__retarget_lock_release_recursive>
 80056ae:	bf00      	nop
 80056b0:	20000344 	.word	0x20000344

080056b4 <__ssputs_r>:
 80056b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b8:	688e      	ldr	r6, [r1, #8]
 80056ba:	461f      	mov	r7, r3
 80056bc:	42be      	cmp	r6, r7
 80056be:	680b      	ldr	r3, [r1, #0]
 80056c0:	4682      	mov	sl, r0
 80056c2:	460c      	mov	r4, r1
 80056c4:	4690      	mov	r8, r2
 80056c6:	d82d      	bhi.n	8005724 <__ssputs_r+0x70>
 80056c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056d0:	d026      	beq.n	8005720 <__ssputs_r+0x6c>
 80056d2:	6965      	ldr	r5, [r4, #20]
 80056d4:	6909      	ldr	r1, [r1, #16]
 80056d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056da:	eba3 0901 	sub.w	r9, r3, r1
 80056de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056e2:	1c7b      	adds	r3, r7, #1
 80056e4:	444b      	add	r3, r9
 80056e6:	106d      	asrs	r5, r5, #1
 80056e8:	429d      	cmp	r5, r3
 80056ea:	bf38      	it	cc
 80056ec:	461d      	movcc	r5, r3
 80056ee:	0553      	lsls	r3, r2, #21
 80056f0:	d527      	bpl.n	8005742 <__ssputs_r+0x8e>
 80056f2:	4629      	mov	r1, r5
 80056f4:	f7ff ff52 	bl	800559c <_malloc_r>
 80056f8:	4606      	mov	r6, r0
 80056fa:	b360      	cbz	r0, 8005756 <__ssputs_r+0xa2>
 80056fc:	6921      	ldr	r1, [r4, #16]
 80056fe:	464a      	mov	r2, r9
 8005700:	f000 fcbe 	bl	8006080 <memcpy>
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800570a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800570e:	81a3      	strh	r3, [r4, #12]
 8005710:	6126      	str	r6, [r4, #16]
 8005712:	6165      	str	r5, [r4, #20]
 8005714:	444e      	add	r6, r9
 8005716:	eba5 0509 	sub.w	r5, r5, r9
 800571a:	6026      	str	r6, [r4, #0]
 800571c:	60a5      	str	r5, [r4, #8]
 800571e:	463e      	mov	r6, r7
 8005720:	42be      	cmp	r6, r7
 8005722:	d900      	bls.n	8005726 <__ssputs_r+0x72>
 8005724:	463e      	mov	r6, r7
 8005726:	6820      	ldr	r0, [r4, #0]
 8005728:	4632      	mov	r2, r6
 800572a:	4641      	mov	r1, r8
 800572c:	f000 fc7e 	bl	800602c <memmove>
 8005730:	68a3      	ldr	r3, [r4, #8]
 8005732:	1b9b      	subs	r3, r3, r6
 8005734:	60a3      	str	r3, [r4, #8]
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	4433      	add	r3, r6
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	2000      	movs	r0, #0
 800573e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005742:	462a      	mov	r2, r5
 8005744:	f000 fcaa 	bl	800609c <_realloc_r>
 8005748:	4606      	mov	r6, r0
 800574a:	2800      	cmp	r0, #0
 800574c:	d1e0      	bne.n	8005710 <__ssputs_r+0x5c>
 800574e:	6921      	ldr	r1, [r4, #16]
 8005750:	4650      	mov	r0, sl
 8005752:	f7ff feb7 	bl	80054c4 <_free_r>
 8005756:	230c      	movs	r3, #12
 8005758:	f8ca 3000 	str.w	r3, [sl]
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005768:	e7e9      	b.n	800573e <__ssputs_r+0x8a>
	...

0800576c <_svfiprintf_r>:
 800576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005770:	4698      	mov	r8, r3
 8005772:	898b      	ldrh	r3, [r1, #12]
 8005774:	061b      	lsls	r3, r3, #24
 8005776:	b09d      	sub	sp, #116	@ 0x74
 8005778:	4607      	mov	r7, r0
 800577a:	460d      	mov	r5, r1
 800577c:	4614      	mov	r4, r2
 800577e:	d510      	bpl.n	80057a2 <_svfiprintf_r+0x36>
 8005780:	690b      	ldr	r3, [r1, #16]
 8005782:	b973      	cbnz	r3, 80057a2 <_svfiprintf_r+0x36>
 8005784:	2140      	movs	r1, #64	@ 0x40
 8005786:	f7ff ff09 	bl	800559c <_malloc_r>
 800578a:	6028      	str	r0, [r5, #0]
 800578c:	6128      	str	r0, [r5, #16]
 800578e:	b930      	cbnz	r0, 800579e <_svfiprintf_r+0x32>
 8005790:	230c      	movs	r3, #12
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005798:	b01d      	add	sp, #116	@ 0x74
 800579a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579e:	2340      	movs	r3, #64	@ 0x40
 80057a0:	616b      	str	r3, [r5, #20]
 80057a2:	2300      	movs	r3, #0
 80057a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80057a6:	2320      	movs	r3, #32
 80057a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80057b0:	2330      	movs	r3, #48	@ 0x30
 80057b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005950 <_svfiprintf_r+0x1e4>
 80057b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057ba:	f04f 0901 	mov.w	r9, #1
 80057be:	4623      	mov	r3, r4
 80057c0:	469a      	mov	sl, r3
 80057c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057c6:	b10a      	cbz	r2, 80057cc <_svfiprintf_r+0x60>
 80057c8:	2a25      	cmp	r2, #37	@ 0x25
 80057ca:	d1f9      	bne.n	80057c0 <_svfiprintf_r+0x54>
 80057cc:	ebba 0b04 	subs.w	fp, sl, r4
 80057d0:	d00b      	beq.n	80057ea <_svfiprintf_r+0x7e>
 80057d2:	465b      	mov	r3, fp
 80057d4:	4622      	mov	r2, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	4638      	mov	r0, r7
 80057da:	f7ff ff6b 	bl	80056b4 <__ssputs_r>
 80057de:	3001      	adds	r0, #1
 80057e0:	f000 80a7 	beq.w	8005932 <_svfiprintf_r+0x1c6>
 80057e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057e6:	445a      	add	r2, fp
 80057e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80057ea:	f89a 3000 	ldrb.w	r3, [sl]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 809f 	beq.w	8005932 <_svfiprintf_r+0x1c6>
 80057f4:	2300      	movs	r3, #0
 80057f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057fe:	f10a 0a01 	add.w	sl, sl, #1
 8005802:	9304      	str	r3, [sp, #16]
 8005804:	9307      	str	r3, [sp, #28]
 8005806:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800580a:	931a      	str	r3, [sp, #104]	@ 0x68
 800580c:	4654      	mov	r4, sl
 800580e:	2205      	movs	r2, #5
 8005810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005814:	484e      	ldr	r0, [pc, #312]	@ (8005950 <_svfiprintf_r+0x1e4>)
 8005816:	f7fa fcdb 	bl	80001d0 <memchr>
 800581a:	9a04      	ldr	r2, [sp, #16]
 800581c:	b9d8      	cbnz	r0, 8005856 <_svfiprintf_r+0xea>
 800581e:	06d0      	lsls	r0, r2, #27
 8005820:	bf44      	itt	mi
 8005822:	2320      	movmi	r3, #32
 8005824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005828:	0711      	lsls	r1, r2, #28
 800582a:	bf44      	itt	mi
 800582c:	232b      	movmi	r3, #43	@ 0x2b
 800582e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005832:	f89a 3000 	ldrb.w	r3, [sl]
 8005836:	2b2a      	cmp	r3, #42	@ 0x2a
 8005838:	d015      	beq.n	8005866 <_svfiprintf_r+0xfa>
 800583a:	9a07      	ldr	r2, [sp, #28]
 800583c:	4654      	mov	r4, sl
 800583e:	2000      	movs	r0, #0
 8005840:	f04f 0c0a 	mov.w	ip, #10
 8005844:	4621      	mov	r1, r4
 8005846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800584a:	3b30      	subs	r3, #48	@ 0x30
 800584c:	2b09      	cmp	r3, #9
 800584e:	d94b      	bls.n	80058e8 <_svfiprintf_r+0x17c>
 8005850:	b1b0      	cbz	r0, 8005880 <_svfiprintf_r+0x114>
 8005852:	9207      	str	r2, [sp, #28]
 8005854:	e014      	b.n	8005880 <_svfiprintf_r+0x114>
 8005856:	eba0 0308 	sub.w	r3, r0, r8
 800585a:	fa09 f303 	lsl.w	r3, r9, r3
 800585e:	4313      	orrs	r3, r2
 8005860:	9304      	str	r3, [sp, #16]
 8005862:	46a2      	mov	sl, r4
 8005864:	e7d2      	b.n	800580c <_svfiprintf_r+0xa0>
 8005866:	9b03      	ldr	r3, [sp, #12]
 8005868:	1d19      	adds	r1, r3, #4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	9103      	str	r1, [sp, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	bfbb      	ittet	lt
 8005872:	425b      	neglt	r3, r3
 8005874:	f042 0202 	orrlt.w	r2, r2, #2
 8005878:	9307      	strge	r3, [sp, #28]
 800587a:	9307      	strlt	r3, [sp, #28]
 800587c:	bfb8      	it	lt
 800587e:	9204      	strlt	r2, [sp, #16]
 8005880:	7823      	ldrb	r3, [r4, #0]
 8005882:	2b2e      	cmp	r3, #46	@ 0x2e
 8005884:	d10a      	bne.n	800589c <_svfiprintf_r+0x130>
 8005886:	7863      	ldrb	r3, [r4, #1]
 8005888:	2b2a      	cmp	r3, #42	@ 0x2a
 800588a:	d132      	bne.n	80058f2 <_svfiprintf_r+0x186>
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	1d1a      	adds	r2, r3, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	9203      	str	r2, [sp, #12]
 8005894:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005898:	3402      	adds	r4, #2
 800589a:	9305      	str	r3, [sp, #20]
 800589c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005960 <_svfiprintf_r+0x1f4>
 80058a0:	7821      	ldrb	r1, [r4, #0]
 80058a2:	2203      	movs	r2, #3
 80058a4:	4650      	mov	r0, sl
 80058a6:	f7fa fc93 	bl	80001d0 <memchr>
 80058aa:	b138      	cbz	r0, 80058bc <_svfiprintf_r+0x150>
 80058ac:	9b04      	ldr	r3, [sp, #16]
 80058ae:	eba0 000a 	sub.w	r0, r0, sl
 80058b2:	2240      	movs	r2, #64	@ 0x40
 80058b4:	4082      	lsls	r2, r0
 80058b6:	4313      	orrs	r3, r2
 80058b8:	3401      	adds	r4, #1
 80058ba:	9304      	str	r3, [sp, #16]
 80058bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c0:	4824      	ldr	r0, [pc, #144]	@ (8005954 <_svfiprintf_r+0x1e8>)
 80058c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058c6:	2206      	movs	r2, #6
 80058c8:	f7fa fc82 	bl	80001d0 <memchr>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d036      	beq.n	800593e <_svfiprintf_r+0x1d2>
 80058d0:	4b21      	ldr	r3, [pc, #132]	@ (8005958 <_svfiprintf_r+0x1ec>)
 80058d2:	bb1b      	cbnz	r3, 800591c <_svfiprintf_r+0x1b0>
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	3307      	adds	r3, #7
 80058d8:	f023 0307 	bic.w	r3, r3, #7
 80058dc:	3308      	adds	r3, #8
 80058de:	9303      	str	r3, [sp, #12]
 80058e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058e2:	4433      	add	r3, r6
 80058e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058e6:	e76a      	b.n	80057be <_svfiprintf_r+0x52>
 80058e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ec:	460c      	mov	r4, r1
 80058ee:	2001      	movs	r0, #1
 80058f0:	e7a8      	b.n	8005844 <_svfiprintf_r+0xd8>
 80058f2:	2300      	movs	r3, #0
 80058f4:	3401      	adds	r4, #1
 80058f6:	9305      	str	r3, [sp, #20]
 80058f8:	4619      	mov	r1, r3
 80058fa:	f04f 0c0a 	mov.w	ip, #10
 80058fe:	4620      	mov	r0, r4
 8005900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005904:	3a30      	subs	r2, #48	@ 0x30
 8005906:	2a09      	cmp	r2, #9
 8005908:	d903      	bls.n	8005912 <_svfiprintf_r+0x1a6>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0c6      	beq.n	800589c <_svfiprintf_r+0x130>
 800590e:	9105      	str	r1, [sp, #20]
 8005910:	e7c4      	b.n	800589c <_svfiprintf_r+0x130>
 8005912:	fb0c 2101 	mla	r1, ip, r1, r2
 8005916:	4604      	mov	r4, r0
 8005918:	2301      	movs	r3, #1
 800591a:	e7f0      	b.n	80058fe <_svfiprintf_r+0x192>
 800591c:	ab03      	add	r3, sp, #12
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	462a      	mov	r2, r5
 8005922:	4b0e      	ldr	r3, [pc, #56]	@ (800595c <_svfiprintf_r+0x1f0>)
 8005924:	a904      	add	r1, sp, #16
 8005926:	4638      	mov	r0, r7
 8005928:	f3af 8000 	nop.w
 800592c:	1c42      	adds	r2, r0, #1
 800592e:	4606      	mov	r6, r0
 8005930:	d1d6      	bne.n	80058e0 <_svfiprintf_r+0x174>
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	065b      	lsls	r3, r3, #25
 8005936:	f53f af2d 	bmi.w	8005794 <_svfiprintf_r+0x28>
 800593a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800593c:	e72c      	b.n	8005798 <_svfiprintf_r+0x2c>
 800593e:	ab03      	add	r3, sp, #12
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	462a      	mov	r2, r5
 8005944:	4b05      	ldr	r3, [pc, #20]	@ (800595c <_svfiprintf_r+0x1f0>)
 8005946:	a904      	add	r1, sp, #16
 8005948:	4638      	mov	r0, r7
 800594a:	f000 f9bb 	bl	8005cc4 <_printf_i>
 800594e:	e7ed      	b.n	800592c <_svfiprintf_r+0x1c0>
 8005950:	08006278 	.word	0x08006278
 8005954:	08006282 	.word	0x08006282
 8005958:	00000000 	.word	0x00000000
 800595c:	080056b5 	.word	0x080056b5
 8005960:	0800627e 	.word	0x0800627e

08005964 <__sfputc_r>:
 8005964:	6893      	ldr	r3, [r2, #8]
 8005966:	3b01      	subs	r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	b410      	push	{r4}
 800596c:	6093      	str	r3, [r2, #8]
 800596e:	da08      	bge.n	8005982 <__sfputc_r+0x1e>
 8005970:	6994      	ldr	r4, [r2, #24]
 8005972:	42a3      	cmp	r3, r4
 8005974:	db01      	blt.n	800597a <__sfputc_r+0x16>
 8005976:	290a      	cmp	r1, #10
 8005978:	d103      	bne.n	8005982 <__sfputc_r+0x1e>
 800597a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800597e:	f000 bac1 	b.w	8005f04 <__swbuf_r>
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	1c58      	adds	r0, r3, #1
 8005986:	6010      	str	r0, [r2, #0]
 8005988:	7019      	strb	r1, [r3, #0]
 800598a:	4608      	mov	r0, r1
 800598c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005990:	4770      	bx	lr

08005992 <__sfputs_r>:
 8005992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005994:	4606      	mov	r6, r0
 8005996:	460f      	mov	r7, r1
 8005998:	4614      	mov	r4, r2
 800599a:	18d5      	adds	r5, r2, r3
 800599c:	42ac      	cmp	r4, r5
 800599e:	d101      	bne.n	80059a4 <__sfputs_r+0x12>
 80059a0:	2000      	movs	r0, #0
 80059a2:	e007      	b.n	80059b4 <__sfputs_r+0x22>
 80059a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a8:	463a      	mov	r2, r7
 80059aa:	4630      	mov	r0, r6
 80059ac:	f7ff ffda 	bl	8005964 <__sfputc_r>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d1f3      	bne.n	800599c <__sfputs_r+0xa>
 80059b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059b8 <_vfiprintf_r>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	460d      	mov	r5, r1
 80059be:	b09d      	sub	sp, #116	@ 0x74
 80059c0:	4614      	mov	r4, r2
 80059c2:	4698      	mov	r8, r3
 80059c4:	4606      	mov	r6, r0
 80059c6:	b118      	cbz	r0, 80059d0 <_vfiprintf_r+0x18>
 80059c8:	6a03      	ldr	r3, [r0, #32]
 80059ca:	b90b      	cbnz	r3, 80059d0 <_vfiprintf_r+0x18>
 80059cc:	f7ff fc52 	bl	8005274 <__sinit>
 80059d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059d2:	07d9      	lsls	r1, r3, #31
 80059d4:	d405      	bmi.n	80059e2 <_vfiprintf_r+0x2a>
 80059d6:	89ab      	ldrh	r3, [r5, #12]
 80059d8:	059a      	lsls	r2, r3, #22
 80059da:	d402      	bmi.n	80059e2 <_vfiprintf_r+0x2a>
 80059dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059de:	f7ff fd6e 	bl	80054be <__retarget_lock_acquire_recursive>
 80059e2:	89ab      	ldrh	r3, [r5, #12]
 80059e4:	071b      	lsls	r3, r3, #28
 80059e6:	d501      	bpl.n	80059ec <_vfiprintf_r+0x34>
 80059e8:	692b      	ldr	r3, [r5, #16]
 80059ea:	b99b      	cbnz	r3, 8005a14 <_vfiprintf_r+0x5c>
 80059ec:	4629      	mov	r1, r5
 80059ee:	4630      	mov	r0, r6
 80059f0:	f000 fac6 	bl	8005f80 <__swsetup_r>
 80059f4:	b170      	cbz	r0, 8005a14 <_vfiprintf_r+0x5c>
 80059f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059f8:	07dc      	lsls	r4, r3, #31
 80059fa:	d504      	bpl.n	8005a06 <_vfiprintf_r+0x4e>
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a00:	b01d      	add	sp, #116	@ 0x74
 8005a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a06:	89ab      	ldrh	r3, [r5, #12]
 8005a08:	0598      	lsls	r0, r3, #22
 8005a0a:	d4f7      	bmi.n	80059fc <_vfiprintf_r+0x44>
 8005a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a0e:	f7ff fd57 	bl	80054c0 <__retarget_lock_release_recursive>
 8005a12:	e7f3      	b.n	80059fc <_vfiprintf_r+0x44>
 8005a14:	2300      	movs	r3, #0
 8005a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a18:	2320      	movs	r3, #32
 8005a1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a22:	2330      	movs	r3, #48	@ 0x30
 8005a24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005bd4 <_vfiprintf_r+0x21c>
 8005a28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a2c:	f04f 0901 	mov.w	r9, #1
 8005a30:	4623      	mov	r3, r4
 8005a32:	469a      	mov	sl, r3
 8005a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a38:	b10a      	cbz	r2, 8005a3e <_vfiprintf_r+0x86>
 8005a3a:	2a25      	cmp	r2, #37	@ 0x25
 8005a3c:	d1f9      	bne.n	8005a32 <_vfiprintf_r+0x7a>
 8005a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a42:	d00b      	beq.n	8005a5c <_vfiprintf_r+0xa4>
 8005a44:	465b      	mov	r3, fp
 8005a46:	4622      	mov	r2, r4
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff ffa1 	bl	8005992 <__sfputs_r>
 8005a50:	3001      	adds	r0, #1
 8005a52:	f000 80a7 	beq.w	8005ba4 <_vfiprintf_r+0x1ec>
 8005a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a58:	445a      	add	r2, fp
 8005a5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 809f 	beq.w	8005ba4 <_vfiprintf_r+0x1ec>
 8005a66:	2300      	movs	r3, #0
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a70:	f10a 0a01 	add.w	sl, sl, #1
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a7e:	4654      	mov	r4, sl
 8005a80:	2205      	movs	r2, #5
 8005a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a86:	4853      	ldr	r0, [pc, #332]	@ (8005bd4 <_vfiprintf_r+0x21c>)
 8005a88:	f7fa fba2 	bl	80001d0 <memchr>
 8005a8c:	9a04      	ldr	r2, [sp, #16]
 8005a8e:	b9d8      	cbnz	r0, 8005ac8 <_vfiprintf_r+0x110>
 8005a90:	06d1      	lsls	r1, r2, #27
 8005a92:	bf44      	itt	mi
 8005a94:	2320      	movmi	r3, #32
 8005a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a9a:	0713      	lsls	r3, r2, #28
 8005a9c:	bf44      	itt	mi
 8005a9e:	232b      	movmi	r3, #43	@ 0x2b
 8005aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aaa:	d015      	beq.n	8005ad8 <_vfiprintf_r+0x120>
 8005aac:	9a07      	ldr	r2, [sp, #28]
 8005aae:	4654      	mov	r4, sl
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	f04f 0c0a 	mov.w	ip, #10
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005abc:	3b30      	subs	r3, #48	@ 0x30
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d94b      	bls.n	8005b5a <_vfiprintf_r+0x1a2>
 8005ac2:	b1b0      	cbz	r0, 8005af2 <_vfiprintf_r+0x13a>
 8005ac4:	9207      	str	r2, [sp, #28]
 8005ac6:	e014      	b.n	8005af2 <_vfiprintf_r+0x13a>
 8005ac8:	eba0 0308 	sub.w	r3, r0, r8
 8005acc:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	46a2      	mov	sl, r4
 8005ad6:	e7d2      	b.n	8005a7e <_vfiprintf_r+0xc6>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	1d19      	adds	r1, r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	9103      	str	r1, [sp, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bfbb      	ittet	lt
 8005ae4:	425b      	neglt	r3, r3
 8005ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aea:	9307      	strge	r3, [sp, #28]
 8005aec:	9307      	strlt	r3, [sp, #28]
 8005aee:	bfb8      	it	lt
 8005af0:	9204      	strlt	r2, [sp, #16]
 8005af2:	7823      	ldrb	r3, [r4, #0]
 8005af4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005af6:	d10a      	bne.n	8005b0e <_vfiprintf_r+0x156>
 8005af8:	7863      	ldrb	r3, [r4, #1]
 8005afa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005afc:	d132      	bne.n	8005b64 <_vfiprintf_r+0x1ac>
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	1d1a      	adds	r2, r3, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	9203      	str	r2, [sp, #12]
 8005b06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b0a:	3402      	adds	r4, #2
 8005b0c:	9305      	str	r3, [sp, #20]
 8005b0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005be4 <_vfiprintf_r+0x22c>
 8005b12:	7821      	ldrb	r1, [r4, #0]
 8005b14:	2203      	movs	r2, #3
 8005b16:	4650      	mov	r0, sl
 8005b18:	f7fa fb5a 	bl	80001d0 <memchr>
 8005b1c:	b138      	cbz	r0, 8005b2e <_vfiprintf_r+0x176>
 8005b1e:	9b04      	ldr	r3, [sp, #16]
 8005b20:	eba0 000a 	sub.w	r0, r0, sl
 8005b24:	2240      	movs	r2, #64	@ 0x40
 8005b26:	4082      	lsls	r2, r0
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	3401      	adds	r4, #1
 8005b2c:	9304      	str	r3, [sp, #16]
 8005b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b32:	4829      	ldr	r0, [pc, #164]	@ (8005bd8 <_vfiprintf_r+0x220>)
 8005b34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b38:	2206      	movs	r2, #6
 8005b3a:	f7fa fb49 	bl	80001d0 <memchr>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d03f      	beq.n	8005bc2 <_vfiprintf_r+0x20a>
 8005b42:	4b26      	ldr	r3, [pc, #152]	@ (8005bdc <_vfiprintf_r+0x224>)
 8005b44:	bb1b      	cbnz	r3, 8005b8e <_vfiprintf_r+0x1d6>
 8005b46:	9b03      	ldr	r3, [sp, #12]
 8005b48:	3307      	adds	r3, #7
 8005b4a:	f023 0307 	bic.w	r3, r3, #7
 8005b4e:	3308      	adds	r3, #8
 8005b50:	9303      	str	r3, [sp, #12]
 8005b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b54:	443b      	add	r3, r7
 8005b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b58:	e76a      	b.n	8005a30 <_vfiprintf_r+0x78>
 8005b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b5e:	460c      	mov	r4, r1
 8005b60:	2001      	movs	r0, #1
 8005b62:	e7a8      	b.n	8005ab6 <_vfiprintf_r+0xfe>
 8005b64:	2300      	movs	r3, #0
 8005b66:	3401      	adds	r4, #1
 8005b68:	9305      	str	r3, [sp, #20]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	f04f 0c0a 	mov.w	ip, #10
 8005b70:	4620      	mov	r0, r4
 8005b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b76:	3a30      	subs	r2, #48	@ 0x30
 8005b78:	2a09      	cmp	r2, #9
 8005b7a:	d903      	bls.n	8005b84 <_vfiprintf_r+0x1cc>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0c6      	beq.n	8005b0e <_vfiprintf_r+0x156>
 8005b80:	9105      	str	r1, [sp, #20]
 8005b82:	e7c4      	b.n	8005b0e <_vfiprintf_r+0x156>
 8005b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b88:	4604      	mov	r4, r0
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e7f0      	b.n	8005b70 <_vfiprintf_r+0x1b8>
 8005b8e:	ab03      	add	r3, sp, #12
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	462a      	mov	r2, r5
 8005b94:	4b12      	ldr	r3, [pc, #72]	@ (8005be0 <_vfiprintf_r+0x228>)
 8005b96:	a904      	add	r1, sp, #16
 8005b98:	4630      	mov	r0, r6
 8005b9a:	f3af 8000 	nop.w
 8005b9e:	4607      	mov	r7, r0
 8005ba0:	1c78      	adds	r0, r7, #1
 8005ba2:	d1d6      	bne.n	8005b52 <_vfiprintf_r+0x19a>
 8005ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ba6:	07d9      	lsls	r1, r3, #31
 8005ba8:	d405      	bmi.n	8005bb6 <_vfiprintf_r+0x1fe>
 8005baa:	89ab      	ldrh	r3, [r5, #12]
 8005bac:	059a      	lsls	r2, r3, #22
 8005bae:	d402      	bmi.n	8005bb6 <_vfiprintf_r+0x1fe>
 8005bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bb2:	f7ff fc85 	bl	80054c0 <__retarget_lock_release_recursive>
 8005bb6:	89ab      	ldrh	r3, [r5, #12]
 8005bb8:	065b      	lsls	r3, r3, #25
 8005bba:	f53f af1f 	bmi.w	80059fc <_vfiprintf_r+0x44>
 8005bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bc0:	e71e      	b.n	8005a00 <_vfiprintf_r+0x48>
 8005bc2:	ab03      	add	r3, sp, #12
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	4b05      	ldr	r3, [pc, #20]	@ (8005be0 <_vfiprintf_r+0x228>)
 8005bca:	a904      	add	r1, sp, #16
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f000 f879 	bl	8005cc4 <_printf_i>
 8005bd2:	e7e4      	b.n	8005b9e <_vfiprintf_r+0x1e6>
 8005bd4:	08006278 	.word	0x08006278
 8005bd8:	08006282 	.word	0x08006282
 8005bdc:	00000000 	.word	0x00000000
 8005be0:	08005993 	.word	0x08005993
 8005be4:	0800627e 	.word	0x0800627e

08005be8 <_printf_common>:
 8005be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	4616      	mov	r6, r2
 8005bee:	4698      	mov	r8, r3
 8005bf0:	688a      	ldr	r2, [r1, #8]
 8005bf2:	690b      	ldr	r3, [r1, #16]
 8005bf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	bfb8      	it	lt
 8005bfc:	4613      	movlt	r3, r2
 8005bfe:	6033      	str	r3, [r6, #0]
 8005c00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c04:	4607      	mov	r7, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	b10a      	cbz	r2, 8005c0e <_printf_common+0x26>
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	6033      	str	r3, [r6, #0]
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	0699      	lsls	r1, r3, #26
 8005c12:	bf42      	ittt	mi
 8005c14:	6833      	ldrmi	r3, [r6, #0]
 8005c16:	3302      	addmi	r3, #2
 8005c18:	6033      	strmi	r3, [r6, #0]
 8005c1a:	6825      	ldr	r5, [r4, #0]
 8005c1c:	f015 0506 	ands.w	r5, r5, #6
 8005c20:	d106      	bne.n	8005c30 <_printf_common+0x48>
 8005c22:	f104 0a19 	add.w	sl, r4, #25
 8005c26:	68e3      	ldr	r3, [r4, #12]
 8005c28:	6832      	ldr	r2, [r6, #0]
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	42ab      	cmp	r3, r5
 8005c2e:	dc26      	bgt.n	8005c7e <_printf_common+0x96>
 8005c30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c34:	6822      	ldr	r2, [r4, #0]
 8005c36:	3b00      	subs	r3, #0
 8005c38:	bf18      	it	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	0692      	lsls	r2, r2, #26
 8005c3e:	d42b      	bmi.n	8005c98 <_printf_common+0xb0>
 8005c40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c44:	4641      	mov	r1, r8
 8005c46:	4638      	mov	r0, r7
 8005c48:	47c8      	blx	r9
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d01e      	beq.n	8005c8c <_printf_common+0xa4>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	6922      	ldr	r2, [r4, #16]
 8005c52:	f003 0306 	and.w	r3, r3, #6
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	bf02      	ittt	eq
 8005c5a:	68e5      	ldreq	r5, [r4, #12]
 8005c5c:	6833      	ldreq	r3, [r6, #0]
 8005c5e:	1aed      	subeq	r5, r5, r3
 8005c60:	68a3      	ldr	r3, [r4, #8]
 8005c62:	bf0c      	ite	eq
 8005c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c68:	2500      	movne	r5, #0
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	bfc4      	itt	gt
 8005c6e:	1a9b      	subgt	r3, r3, r2
 8005c70:	18ed      	addgt	r5, r5, r3
 8005c72:	2600      	movs	r6, #0
 8005c74:	341a      	adds	r4, #26
 8005c76:	42b5      	cmp	r5, r6
 8005c78:	d11a      	bne.n	8005cb0 <_printf_common+0xc8>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e008      	b.n	8005c90 <_printf_common+0xa8>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4652      	mov	r2, sl
 8005c82:	4641      	mov	r1, r8
 8005c84:	4638      	mov	r0, r7
 8005c86:	47c8      	blx	r9
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d103      	bne.n	8005c94 <_printf_common+0xac>
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c94:	3501      	adds	r5, #1
 8005c96:	e7c6      	b.n	8005c26 <_printf_common+0x3e>
 8005c98:	18e1      	adds	r1, r4, r3
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	2030      	movs	r0, #48	@ 0x30
 8005c9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ca2:	4422      	add	r2, r4
 8005ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cac:	3302      	adds	r3, #2
 8005cae:	e7c7      	b.n	8005c40 <_printf_common+0x58>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	47c8      	blx	r9
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d0e6      	beq.n	8005c8c <_printf_common+0xa4>
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7d9      	b.n	8005c76 <_printf_common+0x8e>
	...

08005cc4 <_printf_i>:
 8005cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc8:	7e0f      	ldrb	r7, [r1, #24]
 8005cca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ccc:	2f78      	cmp	r7, #120	@ 0x78
 8005cce:	4691      	mov	r9, r2
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	469a      	mov	sl, r3
 8005cd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cda:	d807      	bhi.n	8005cec <_printf_i+0x28>
 8005cdc:	2f62      	cmp	r7, #98	@ 0x62
 8005cde:	d80a      	bhi.n	8005cf6 <_printf_i+0x32>
 8005ce0:	2f00      	cmp	r7, #0
 8005ce2:	f000 80d2 	beq.w	8005e8a <_printf_i+0x1c6>
 8005ce6:	2f58      	cmp	r7, #88	@ 0x58
 8005ce8:	f000 80b9 	beq.w	8005e5e <_printf_i+0x19a>
 8005cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cf4:	e03a      	b.n	8005d6c <_printf_i+0xa8>
 8005cf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cfa:	2b15      	cmp	r3, #21
 8005cfc:	d8f6      	bhi.n	8005cec <_printf_i+0x28>
 8005cfe:	a101      	add	r1, pc, #4	@ (adr r1, 8005d04 <_printf_i+0x40>)
 8005d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d04:	08005d5d 	.word	0x08005d5d
 8005d08:	08005d71 	.word	0x08005d71
 8005d0c:	08005ced 	.word	0x08005ced
 8005d10:	08005ced 	.word	0x08005ced
 8005d14:	08005ced 	.word	0x08005ced
 8005d18:	08005ced 	.word	0x08005ced
 8005d1c:	08005d71 	.word	0x08005d71
 8005d20:	08005ced 	.word	0x08005ced
 8005d24:	08005ced 	.word	0x08005ced
 8005d28:	08005ced 	.word	0x08005ced
 8005d2c:	08005ced 	.word	0x08005ced
 8005d30:	08005e71 	.word	0x08005e71
 8005d34:	08005d9b 	.word	0x08005d9b
 8005d38:	08005e2b 	.word	0x08005e2b
 8005d3c:	08005ced 	.word	0x08005ced
 8005d40:	08005ced 	.word	0x08005ced
 8005d44:	08005e93 	.word	0x08005e93
 8005d48:	08005ced 	.word	0x08005ced
 8005d4c:	08005d9b 	.word	0x08005d9b
 8005d50:	08005ced 	.word	0x08005ced
 8005d54:	08005ced 	.word	0x08005ced
 8005d58:	08005e33 	.word	0x08005e33
 8005d5c:	6833      	ldr	r3, [r6, #0]
 8005d5e:	1d1a      	adds	r2, r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6032      	str	r2, [r6, #0]
 8005d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e09d      	b.n	8005eac <_printf_i+0x1e8>
 8005d70:	6833      	ldr	r3, [r6, #0]
 8005d72:	6820      	ldr	r0, [r4, #0]
 8005d74:	1d19      	adds	r1, r3, #4
 8005d76:	6031      	str	r1, [r6, #0]
 8005d78:	0606      	lsls	r6, r0, #24
 8005d7a:	d501      	bpl.n	8005d80 <_printf_i+0xbc>
 8005d7c:	681d      	ldr	r5, [r3, #0]
 8005d7e:	e003      	b.n	8005d88 <_printf_i+0xc4>
 8005d80:	0645      	lsls	r5, r0, #25
 8005d82:	d5fb      	bpl.n	8005d7c <_printf_i+0xb8>
 8005d84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d88:	2d00      	cmp	r5, #0
 8005d8a:	da03      	bge.n	8005d94 <_printf_i+0xd0>
 8005d8c:	232d      	movs	r3, #45	@ 0x2d
 8005d8e:	426d      	negs	r5, r5
 8005d90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d94:	4859      	ldr	r0, [pc, #356]	@ (8005efc <_printf_i+0x238>)
 8005d96:	230a      	movs	r3, #10
 8005d98:	e011      	b.n	8005dbe <_printf_i+0xfa>
 8005d9a:	6821      	ldr	r1, [r4, #0]
 8005d9c:	6833      	ldr	r3, [r6, #0]
 8005d9e:	0608      	lsls	r0, r1, #24
 8005da0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005da4:	d402      	bmi.n	8005dac <_printf_i+0xe8>
 8005da6:	0649      	lsls	r1, r1, #25
 8005da8:	bf48      	it	mi
 8005daa:	b2ad      	uxthmi	r5, r5
 8005dac:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dae:	4853      	ldr	r0, [pc, #332]	@ (8005efc <_printf_i+0x238>)
 8005db0:	6033      	str	r3, [r6, #0]
 8005db2:	bf14      	ite	ne
 8005db4:	230a      	movne	r3, #10
 8005db6:	2308      	moveq	r3, #8
 8005db8:	2100      	movs	r1, #0
 8005dba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dbe:	6866      	ldr	r6, [r4, #4]
 8005dc0:	60a6      	str	r6, [r4, #8]
 8005dc2:	2e00      	cmp	r6, #0
 8005dc4:	bfa2      	ittt	ge
 8005dc6:	6821      	ldrge	r1, [r4, #0]
 8005dc8:	f021 0104 	bicge.w	r1, r1, #4
 8005dcc:	6021      	strge	r1, [r4, #0]
 8005dce:	b90d      	cbnz	r5, 8005dd4 <_printf_i+0x110>
 8005dd0:	2e00      	cmp	r6, #0
 8005dd2:	d04b      	beq.n	8005e6c <_printf_i+0x1a8>
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dda:	fb03 5711 	mls	r7, r3, r1, r5
 8005dde:	5dc7      	ldrb	r7, [r0, r7]
 8005de0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005de4:	462f      	mov	r7, r5
 8005de6:	42bb      	cmp	r3, r7
 8005de8:	460d      	mov	r5, r1
 8005dea:	d9f4      	bls.n	8005dd6 <_printf_i+0x112>
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d10b      	bne.n	8005e08 <_printf_i+0x144>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	07df      	lsls	r7, r3, #31
 8005df4:	d508      	bpl.n	8005e08 <_printf_i+0x144>
 8005df6:	6923      	ldr	r3, [r4, #16]
 8005df8:	6861      	ldr	r1, [r4, #4]
 8005dfa:	4299      	cmp	r1, r3
 8005dfc:	bfde      	ittt	le
 8005dfe:	2330      	movle	r3, #48	@ 0x30
 8005e00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e04:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005e08:	1b92      	subs	r2, r2, r6
 8005e0a:	6122      	str	r2, [r4, #16]
 8005e0c:	f8cd a000 	str.w	sl, [sp]
 8005e10:	464b      	mov	r3, r9
 8005e12:	aa03      	add	r2, sp, #12
 8005e14:	4621      	mov	r1, r4
 8005e16:	4640      	mov	r0, r8
 8005e18:	f7ff fee6 	bl	8005be8 <_printf_common>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d14a      	bne.n	8005eb6 <_printf_i+0x1f2>
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e24:	b004      	add	sp, #16
 8005e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	f043 0320 	orr.w	r3, r3, #32
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	4833      	ldr	r0, [pc, #204]	@ (8005f00 <_printf_i+0x23c>)
 8005e34:	2778      	movs	r7, #120	@ 0x78
 8005e36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	6831      	ldr	r1, [r6, #0]
 8005e3e:	061f      	lsls	r7, r3, #24
 8005e40:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e44:	d402      	bmi.n	8005e4c <_printf_i+0x188>
 8005e46:	065f      	lsls	r7, r3, #25
 8005e48:	bf48      	it	mi
 8005e4a:	b2ad      	uxthmi	r5, r5
 8005e4c:	6031      	str	r1, [r6, #0]
 8005e4e:	07d9      	lsls	r1, r3, #31
 8005e50:	bf44      	itt	mi
 8005e52:	f043 0320 	orrmi.w	r3, r3, #32
 8005e56:	6023      	strmi	r3, [r4, #0]
 8005e58:	b11d      	cbz	r5, 8005e62 <_printf_i+0x19e>
 8005e5a:	2310      	movs	r3, #16
 8005e5c:	e7ac      	b.n	8005db8 <_printf_i+0xf4>
 8005e5e:	4827      	ldr	r0, [pc, #156]	@ (8005efc <_printf_i+0x238>)
 8005e60:	e7e9      	b.n	8005e36 <_printf_i+0x172>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	f023 0320 	bic.w	r3, r3, #32
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	e7f6      	b.n	8005e5a <_printf_i+0x196>
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	e7bd      	b.n	8005dec <_printf_i+0x128>
 8005e70:	6833      	ldr	r3, [r6, #0]
 8005e72:	6825      	ldr	r5, [r4, #0]
 8005e74:	6961      	ldr	r1, [r4, #20]
 8005e76:	1d18      	adds	r0, r3, #4
 8005e78:	6030      	str	r0, [r6, #0]
 8005e7a:	062e      	lsls	r6, r5, #24
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	d501      	bpl.n	8005e84 <_printf_i+0x1c0>
 8005e80:	6019      	str	r1, [r3, #0]
 8005e82:	e002      	b.n	8005e8a <_printf_i+0x1c6>
 8005e84:	0668      	lsls	r0, r5, #25
 8005e86:	d5fb      	bpl.n	8005e80 <_printf_i+0x1bc>
 8005e88:	8019      	strh	r1, [r3, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	4616      	mov	r6, r2
 8005e90:	e7bc      	b.n	8005e0c <_printf_i+0x148>
 8005e92:	6833      	ldr	r3, [r6, #0]
 8005e94:	1d1a      	adds	r2, r3, #4
 8005e96:	6032      	str	r2, [r6, #0]
 8005e98:	681e      	ldr	r6, [r3, #0]
 8005e9a:	6862      	ldr	r2, [r4, #4]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f7fa f996 	bl	80001d0 <memchr>
 8005ea4:	b108      	cbz	r0, 8005eaa <_printf_i+0x1e6>
 8005ea6:	1b80      	subs	r0, r0, r6
 8005ea8:	6060      	str	r0, [r4, #4]
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eb4:	e7aa      	b.n	8005e0c <_printf_i+0x148>
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	4632      	mov	r2, r6
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	47d0      	blx	sl
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d0ad      	beq.n	8005e20 <_printf_i+0x15c>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	079b      	lsls	r3, r3, #30
 8005ec8:	d413      	bmi.n	8005ef2 <_printf_i+0x22e>
 8005eca:	68e0      	ldr	r0, [r4, #12]
 8005ecc:	9b03      	ldr	r3, [sp, #12]
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	bfb8      	it	lt
 8005ed2:	4618      	movlt	r0, r3
 8005ed4:	e7a6      	b.n	8005e24 <_printf_i+0x160>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4632      	mov	r2, r6
 8005eda:	4649      	mov	r1, r9
 8005edc:	4640      	mov	r0, r8
 8005ede:	47d0      	blx	sl
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d09d      	beq.n	8005e20 <_printf_i+0x15c>
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	68e3      	ldr	r3, [r4, #12]
 8005ee8:	9903      	ldr	r1, [sp, #12]
 8005eea:	1a5b      	subs	r3, r3, r1
 8005eec:	42ab      	cmp	r3, r5
 8005eee:	dcf2      	bgt.n	8005ed6 <_printf_i+0x212>
 8005ef0:	e7eb      	b.n	8005eca <_printf_i+0x206>
 8005ef2:	2500      	movs	r5, #0
 8005ef4:	f104 0619 	add.w	r6, r4, #25
 8005ef8:	e7f5      	b.n	8005ee6 <_printf_i+0x222>
 8005efa:	bf00      	nop
 8005efc:	08006289 	.word	0x08006289
 8005f00:	0800629a 	.word	0x0800629a

08005f04 <__swbuf_r>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	460e      	mov	r6, r1
 8005f08:	4614      	mov	r4, r2
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	b118      	cbz	r0, 8005f16 <__swbuf_r+0x12>
 8005f0e:	6a03      	ldr	r3, [r0, #32]
 8005f10:	b90b      	cbnz	r3, 8005f16 <__swbuf_r+0x12>
 8005f12:	f7ff f9af 	bl	8005274 <__sinit>
 8005f16:	69a3      	ldr	r3, [r4, #24]
 8005f18:	60a3      	str	r3, [r4, #8]
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	071a      	lsls	r2, r3, #28
 8005f1e:	d501      	bpl.n	8005f24 <__swbuf_r+0x20>
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	b943      	cbnz	r3, 8005f36 <__swbuf_r+0x32>
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f82a 	bl	8005f80 <__swsetup_r>
 8005f2c:	b118      	cbz	r0, 8005f36 <__swbuf_r+0x32>
 8005f2e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005f32:	4638      	mov	r0, r7
 8005f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	6922      	ldr	r2, [r4, #16]
 8005f3a:	1a98      	subs	r0, r3, r2
 8005f3c:	6963      	ldr	r3, [r4, #20]
 8005f3e:	b2f6      	uxtb	r6, r6
 8005f40:	4283      	cmp	r3, r0
 8005f42:	4637      	mov	r7, r6
 8005f44:	dc05      	bgt.n	8005f52 <__swbuf_r+0x4e>
 8005f46:	4621      	mov	r1, r4
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f7ff f8cb 	bl	80050e4 <_fflush_r>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d1ed      	bne.n	8005f2e <__swbuf_r+0x2a>
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	60a3      	str	r3, [r4, #8]
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	6022      	str	r2, [r4, #0]
 8005f5e:	701e      	strb	r6, [r3, #0]
 8005f60:	6962      	ldr	r2, [r4, #20]
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d004      	beq.n	8005f72 <__swbuf_r+0x6e>
 8005f68:	89a3      	ldrh	r3, [r4, #12]
 8005f6a:	07db      	lsls	r3, r3, #31
 8005f6c:	d5e1      	bpl.n	8005f32 <__swbuf_r+0x2e>
 8005f6e:	2e0a      	cmp	r6, #10
 8005f70:	d1df      	bne.n	8005f32 <__swbuf_r+0x2e>
 8005f72:	4621      	mov	r1, r4
 8005f74:	4628      	mov	r0, r5
 8005f76:	f7ff f8b5 	bl	80050e4 <_fflush_r>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d0d9      	beq.n	8005f32 <__swbuf_r+0x2e>
 8005f7e:	e7d6      	b.n	8005f2e <__swbuf_r+0x2a>

08005f80 <__swsetup_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4b29      	ldr	r3, [pc, #164]	@ (8006028 <__swsetup_r+0xa8>)
 8005f84:	4605      	mov	r5, r0
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	460c      	mov	r4, r1
 8005f8a:	b118      	cbz	r0, 8005f94 <__swsetup_r+0x14>
 8005f8c:	6a03      	ldr	r3, [r0, #32]
 8005f8e:	b90b      	cbnz	r3, 8005f94 <__swsetup_r+0x14>
 8005f90:	f7ff f970 	bl	8005274 <__sinit>
 8005f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f98:	0719      	lsls	r1, r3, #28
 8005f9a:	d422      	bmi.n	8005fe2 <__swsetup_r+0x62>
 8005f9c:	06da      	lsls	r2, r3, #27
 8005f9e:	d407      	bmi.n	8005fb0 <__swsetup_r+0x30>
 8005fa0:	2209      	movs	r2, #9
 8005fa2:	602a      	str	r2, [r5, #0]
 8005fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa8:	81a3      	strh	r3, [r4, #12]
 8005faa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fae:	e033      	b.n	8006018 <__swsetup_r+0x98>
 8005fb0:	0758      	lsls	r0, r3, #29
 8005fb2:	d512      	bpl.n	8005fda <__swsetup_r+0x5a>
 8005fb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fb6:	b141      	cbz	r1, 8005fca <__swsetup_r+0x4a>
 8005fb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fbc:	4299      	cmp	r1, r3
 8005fbe:	d002      	beq.n	8005fc6 <__swsetup_r+0x46>
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f7ff fa7f 	bl	80054c4 <_free_r>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6063      	str	r3, [r4, #4]
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f043 0308 	orr.w	r3, r3, #8
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	b94b      	cbnz	r3, 8005ffa <__swsetup_r+0x7a>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ff0:	d003      	beq.n	8005ffa <__swsetup_r+0x7a>
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f8a5 	bl	8006144 <__smakebuf_r>
 8005ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ffe:	f013 0201 	ands.w	r2, r3, #1
 8006002:	d00a      	beq.n	800601a <__swsetup_r+0x9a>
 8006004:	2200      	movs	r2, #0
 8006006:	60a2      	str	r2, [r4, #8]
 8006008:	6962      	ldr	r2, [r4, #20]
 800600a:	4252      	negs	r2, r2
 800600c:	61a2      	str	r2, [r4, #24]
 800600e:	6922      	ldr	r2, [r4, #16]
 8006010:	b942      	cbnz	r2, 8006024 <__swsetup_r+0xa4>
 8006012:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006016:	d1c5      	bne.n	8005fa4 <__swsetup_r+0x24>
 8006018:	bd38      	pop	{r3, r4, r5, pc}
 800601a:	0799      	lsls	r1, r3, #30
 800601c:	bf58      	it	pl
 800601e:	6962      	ldrpl	r2, [r4, #20]
 8006020:	60a2      	str	r2, [r4, #8]
 8006022:	e7f4      	b.n	800600e <__swsetup_r+0x8e>
 8006024:	2000      	movs	r0, #0
 8006026:	e7f7      	b.n	8006018 <__swsetup_r+0x98>
 8006028:	20000018 	.word	0x20000018

0800602c <memmove>:
 800602c:	4288      	cmp	r0, r1
 800602e:	b510      	push	{r4, lr}
 8006030:	eb01 0402 	add.w	r4, r1, r2
 8006034:	d902      	bls.n	800603c <memmove+0x10>
 8006036:	4284      	cmp	r4, r0
 8006038:	4623      	mov	r3, r4
 800603a:	d807      	bhi.n	800604c <memmove+0x20>
 800603c:	1e43      	subs	r3, r0, #1
 800603e:	42a1      	cmp	r1, r4
 8006040:	d008      	beq.n	8006054 <memmove+0x28>
 8006042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800604a:	e7f8      	b.n	800603e <memmove+0x12>
 800604c:	4402      	add	r2, r0
 800604e:	4601      	mov	r1, r0
 8006050:	428a      	cmp	r2, r1
 8006052:	d100      	bne.n	8006056 <memmove+0x2a>
 8006054:	bd10      	pop	{r4, pc}
 8006056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800605a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800605e:	e7f7      	b.n	8006050 <memmove+0x24>

08006060 <_sbrk_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d06      	ldr	r5, [pc, #24]	@ (800607c <_sbrk_r+0x1c>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	f7fa ff10 	bl	8000e90 <_sbrk>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_sbrk_r+0x1a>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_sbrk_r+0x1a>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20000340 	.word	0x20000340

08006080 <memcpy>:
 8006080:	440a      	add	r2, r1
 8006082:	4291      	cmp	r1, r2
 8006084:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006088:	d100      	bne.n	800608c <memcpy+0xc>
 800608a:	4770      	bx	lr
 800608c:	b510      	push	{r4, lr}
 800608e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006096:	4291      	cmp	r1, r2
 8006098:	d1f9      	bne.n	800608e <memcpy+0xe>
 800609a:	bd10      	pop	{r4, pc}

0800609c <_realloc_r>:
 800609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a0:	4680      	mov	r8, r0
 80060a2:	4615      	mov	r5, r2
 80060a4:	460c      	mov	r4, r1
 80060a6:	b921      	cbnz	r1, 80060b2 <_realloc_r+0x16>
 80060a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ac:	4611      	mov	r1, r2
 80060ae:	f7ff ba75 	b.w	800559c <_malloc_r>
 80060b2:	b92a      	cbnz	r2, 80060c0 <_realloc_r+0x24>
 80060b4:	f7ff fa06 	bl	80054c4 <_free_r>
 80060b8:	2400      	movs	r4, #0
 80060ba:	4620      	mov	r0, r4
 80060bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c0:	f000 f89e 	bl	8006200 <_malloc_usable_size_r>
 80060c4:	4285      	cmp	r5, r0
 80060c6:	4606      	mov	r6, r0
 80060c8:	d802      	bhi.n	80060d0 <_realloc_r+0x34>
 80060ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060ce:	d8f4      	bhi.n	80060ba <_realloc_r+0x1e>
 80060d0:	4629      	mov	r1, r5
 80060d2:	4640      	mov	r0, r8
 80060d4:	f7ff fa62 	bl	800559c <_malloc_r>
 80060d8:	4607      	mov	r7, r0
 80060da:	2800      	cmp	r0, #0
 80060dc:	d0ec      	beq.n	80060b8 <_realloc_r+0x1c>
 80060de:	42b5      	cmp	r5, r6
 80060e0:	462a      	mov	r2, r5
 80060e2:	4621      	mov	r1, r4
 80060e4:	bf28      	it	cs
 80060e6:	4632      	movcs	r2, r6
 80060e8:	f7ff ffca 	bl	8006080 <memcpy>
 80060ec:	4621      	mov	r1, r4
 80060ee:	4640      	mov	r0, r8
 80060f0:	f7ff f9e8 	bl	80054c4 <_free_r>
 80060f4:	463c      	mov	r4, r7
 80060f6:	e7e0      	b.n	80060ba <_realloc_r+0x1e>

080060f8 <__swhatbuf_r>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	460c      	mov	r4, r1
 80060fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006100:	2900      	cmp	r1, #0
 8006102:	b096      	sub	sp, #88	@ 0x58
 8006104:	4615      	mov	r5, r2
 8006106:	461e      	mov	r6, r3
 8006108:	da0d      	bge.n	8006126 <__swhatbuf_r+0x2e>
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	bf14      	ite	ne
 8006116:	2340      	movne	r3, #64	@ 0x40
 8006118:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800611c:	2000      	movs	r0, #0
 800611e:	6031      	str	r1, [r6, #0]
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	b016      	add	sp, #88	@ 0x58
 8006124:	bd70      	pop	{r4, r5, r6, pc}
 8006126:	466a      	mov	r2, sp
 8006128:	f000 f848 	bl	80061bc <_fstat_r>
 800612c:	2800      	cmp	r0, #0
 800612e:	dbec      	blt.n	800610a <__swhatbuf_r+0x12>
 8006130:	9901      	ldr	r1, [sp, #4]
 8006132:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006136:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800613a:	4259      	negs	r1, r3
 800613c:	4159      	adcs	r1, r3
 800613e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006142:	e7eb      	b.n	800611c <__swhatbuf_r+0x24>

08006144 <__smakebuf_r>:
 8006144:	898b      	ldrh	r3, [r1, #12]
 8006146:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006148:	079d      	lsls	r5, r3, #30
 800614a:	4606      	mov	r6, r0
 800614c:	460c      	mov	r4, r1
 800614e:	d507      	bpl.n	8006160 <__smakebuf_r+0x1c>
 8006150:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	6123      	str	r3, [r4, #16]
 8006158:	2301      	movs	r3, #1
 800615a:	6163      	str	r3, [r4, #20]
 800615c:	b003      	add	sp, #12
 800615e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006160:	ab01      	add	r3, sp, #4
 8006162:	466a      	mov	r2, sp
 8006164:	f7ff ffc8 	bl	80060f8 <__swhatbuf_r>
 8006168:	9f00      	ldr	r7, [sp, #0]
 800616a:	4605      	mov	r5, r0
 800616c:	4639      	mov	r1, r7
 800616e:	4630      	mov	r0, r6
 8006170:	f7ff fa14 	bl	800559c <_malloc_r>
 8006174:	b948      	cbnz	r0, 800618a <__smakebuf_r+0x46>
 8006176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800617a:	059a      	lsls	r2, r3, #22
 800617c:	d4ee      	bmi.n	800615c <__smakebuf_r+0x18>
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	f043 0302 	orr.w	r3, r3, #2
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	e7e2      	b.n	8006150 <__smakebuf_r+0xc>
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	6020      	str	r0, [r4, #0]
 800618e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006192:	81a3      	strh	r3, [r4, #12]
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800619a:	b15b      	cbz	r3, 80061b4 <__smakebuf_r+0x70>
 800619c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061a0:	4630      	mov	r0, r6
 80061a2:	f000 f81d 	bl	80061e0 <_isatty_r>
 80061a6:	b128      	cbz	r0, 80061b4 <__smakebuf_r+0x70>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	f043 0301 	orr.w	r3, r3, #1
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	431d      	orrs	r5, r3
 80061b8:	81a5      	strh	r5, [r4, #12]
 80061ba:	e7cf      	b.n	800615c <__smakebuf_r+0x18>

080061bc <_fstat_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	@ (80061dc <_fstat_r+0x20>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	602b      	str	r3, [r5, #0]
 80061ca:	f7fa fe39 	bl	8000e40 <_fstat>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	d102      	bne.n	80061d8 <_fstat_r+0x1c>
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	b103      	cbz	r3, 80061d8 <_fstat_r+0x1c>
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	bd38      	pop	{r3, r4, r5, pc}
 80061da:	bf00      	nop
 80061dc:	20000340 	.word	0x20000340

080061e0 <_isatty_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4d06      	ldr	r5, [pc, #24]	@ (80061fc <_isatty_r+0x1c>)
 80061e4:	2300      	movs	r3, #0
 80061e6:	4604      	mov	r4, r0
 80061e8:	4608      	mov	r0, r1
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	f7fa fe38 	bl	8000e60 <_isatty>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d102      	bne.n	80061fa <_isatty_r+0x1a>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b103      	cbz	r3, 80061fa <_isatty_r+0x1a>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	20000340 	.word	0x20000340

08006200 <_malloc_usable_size_r>:
 8006200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006204:	1f18      	subs	r0, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	bfbc      	itt	lt
 800620a:	580b      	ldrlt	r3, [r1, r0]
 800620c:	18c0      	addlt	r0, r0, r3
 800620e:	4770      	bx	lr

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
